/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CorrectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CorrectionParameters struct {

	// Category the SLO correction belongs to. Valid values are `Scheduled Maintenance`, `Outside Business Hours`, `Deployment`, `Other`.
	// +kubebuilder:validation:Required
	Category *string `json:"category" tf:"category,omitempty"`

	// Description of the correction being made.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Length of time in seconds for a specified `rrule` recurring SLO correction (required if specifying `rrule`)
	// +kubebuilder:validation:Optional
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// Ending time of the correction in epoch seconds. Required for one time corrections, but optional if `rrule` is specified
	// +kubebuilder:validation:Optional
	End *float64 `json:"end,omitempty" tf:"end,omitempty"`

	// Recurrence rules as defined in the iCalendar RFC 5545. Supported rules for SLO corrections are `FREQ`, `INTERVAL`, `COUNT` and `UNTIL`.
	// +kubebuilder:validation:Optional
	Rrule *string `json:"rrule,omitempty" tf:"rrule,omitempty"`

	// ID of the SLO that this correction will be applied to.
	// +kubebuilder:validation:Required
	SLOID *string `json:"sloId" tf:"slo_id,omitempty"`

	// Starting time of the correction in epoch seconds.
	// +kubebuilder:validation:Required
	Start *float64 `json:"start" tf:"start,omitempty"`

	// The timezone to display in the UI for the correction times (defaults to "UTC")
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

// CorrectionSpec defines the desired state of Correction
type CorrectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CorrectionParameters `json:"forProvider"`
}

// CorrectionStatus defines the observed state of Correction.
type CorrectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CorrectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Correction is the Schema for the Corrections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type Correction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CorrectionSpec   `json:"spec"`
	Status            CorrectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CorrectionList contains a list of Corrections
type CorrectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Correction `json:"items"`
}

// Repository type metadata.
var (
	Correction_Kind             = "Correction"
	Correction_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Correction_Kind}.String()
	Correction_KindAPIVersion   = Correction_Kind + "." + CRDGroupVersion.String()
	Correction_GroupVersionKind = CRDGroupVersion.WithKind(Correction_Kind)
)

func init() {
	SchemeBuilder.Register(&Correction{}, &CorrectionList{})
}
