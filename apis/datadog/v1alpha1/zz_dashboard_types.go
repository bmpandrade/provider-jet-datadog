/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertGraphDefinitionObservation struct {
}

type AlertGraphDefinitionParameters struct {

	// The ID of the monitor used by the widget.
	// +kubebuilder:validation:Required
	AlertID *string `json:"alertId" tf:"alert_id,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// Type of visualization to use when displaying the widget. Valid values are `timeseries`, `toplist`.
	// +kubebuilder:validation:Required
	VizType *string `json:"vizType" tf:"viz_type,omitempty"`
}

type AlertValueDefinitionObservation struct {
}

type AlertValueDefinitionParameters struct {

	// The ID of the monitor used by the widget.
	// +kubebuilder:validation:Required
	AlertID *string `json:"alertId" tf:"alert_id,omitempty"`

	// The precision to use when displaying the value. Use `*` for maximum precision.
	// +kubebuilder:validation:Optional
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The unit for the value displayed in the widget.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type ApmDependencyStatsQueryObservation struct {
}

type ApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type ApmQueryComputeQueryObservation struct {
}

type ApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ApmQueryGroupByObservation struct {
}

type ApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ApmQueryGroupBySortQueryObservation struct {
}

type ApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ApmQueryMultiComputeObservation struct {
}

type ApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ApmQueryObservation struct {
}

type ApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []GroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []MultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ApmResourceStatsQueryObservation struct {
}

type ApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type ApmStatsQueryColumnsObservation struct {
}

type ApmStatsQueryColumnsParameters struct {

	// A user-assigned alias for the column.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// The column name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ApmStatsQueryObservation struct {
}

type ApmStatsQueryParameters struct {

	// Column properties used by the front end for display.
	// +kubebuilder:validation:Optional
	Columns []ColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// The environment name.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// The operation name associated with the service.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The organization's host group name and value.
	// +kubebuilder:validation:Required
	PrimaryTag *string `json:"primaryTag" tf:"primary_tag,omitempty"`

	// The resource name.
	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The level of detail for the request. Valid values are `service`, `resource`, `span`.
	// +kubebuilder:validation:Required
	RowType *string `json:"rowType" tf:"row_type,omitempty"`

	// The service name.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

type AuditQueryComputeQueryObservation struct {
}

type AuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type AuditQueryGroupByObservation struct {
}

type AuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []AuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type AuditQueryGroupBySortQueryObservation struct {
}

type AuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type AuditQueryMultiComputeObservation struct {
}

type AuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type AuditQueryObservation struct {
}

type AuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []AuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []AuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []AuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ChangeDefinitionCustomLinkObservation struct {
}

type ChangeDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type ChangeDefinitionObservation struct {
}

type ChangeDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []CustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Request []RequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ChangeDefinitionRequestApmQueryObservation struct {
}

type ChangeDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ChangeDefinitionRequestFormulaObservation struct {
}

type ChangeDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []RequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []RequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type ChangeDefinitionRequestLogQueryComputeQueryObservation struct {
}

type ChangeDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestLogQueryGroupByObservation struct {
}

type ChangeDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ChangeDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ChangeDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type ChangeDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ChangeDefinitionRequestLogQueryMultiComputeObservation struct {
}

type ChangeDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestLogQueryObservation struct {
}

type ChangeDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ChangeDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ChangeDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ChangeDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ChangeDefinitionRequestObservation struct {
}

type ChangeDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []ChangeDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
	// +kubebuilder:validation:Optional
	ChangeType *string `json:"changeType,omitempty" tf:"change_type,omitempty"`

	// Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
	// +kubebuilder:validation:Optional
	CompareTo *string `json:"compareTo,omitempty" tf:"compare_to,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []ChangeDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
	// +kubebuilder:validation:Optional
	IncreaseGood *bool `json:"increaseGood,omitempty" tf:"increase_good,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []ChangeDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// What to order by. Valid values are `change`, `name`, `present`, `past`.
	// +kubebuilder:validation:Optional
	OrderBy *string `json:"orderBy,omitempty" tf:"order_by,omitempty"`

	// Widget sorting method. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	OrderDir *string `json:"orderDir,omitempty" tf:"order_dir,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []ChangeDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []ChangeDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []ChangeDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []ChangeDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// If set to `true`, displays the current value.
	// +kubebuilder:validation:Optional
	ShowPresent *bool `json:"showPresent,omitempty" tf:"show_present,omitempty"`
}

type ChangeDefinitionRequestProcessQueryObservation struct {
}

type ChangeDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type ChangeDefinitionRequestQueryObservation struct {
}

type ChangeDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []RequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []RequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []RequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []RequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []ChangeDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type ChangeDefinitionRequestQueryProcessQueryObservation struct {
}

type ChangeDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type ChangeDefinitionRequestRumQueryComputeQueryObservation struct {
}

type ChangeDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestRumQueryGroupByObservation struct {
}

type ChangeDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ChangeDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ChangeDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type ChangeDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ChangeDefinitionRequestRumQueryMultiComputeObservation struct {
}

type ChangeDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestRumQueryObservation struct {
}

type ChangeDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ChangeDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ChangeDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ChangeDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type ChangeDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryGroupByObservation struct {
}

type ChangeDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ChangeDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type ChangeDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type ChangeDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ChangeDefinitionRequestSecurityQueryObservation struct {
}

type ChangeDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ChangeDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ChangeDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ChangeDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type CheckStatusDefinitionObservation struct {
}

type CheckStatusDefinitionParameters struct {

	// The check to use in the widget.
	// +kubebuilder:validation:Required
	Check *string `json:"check" tf:"check,omitempty"`

	// The check group to use in the widget.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// When `grouping = "cluster"`, indicates a list of tags to use for grouping.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The kind of grouping to use. Valid values are `check`, `cluster`.
	// +kubebuilder:validation:Required
	Grouping *string `json:"grouping" tf:"grouping,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A list of tags to use in the widget.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ColumnsObservation struct {
}

type ColumnsParameters struct {

	// A user-assigned alias for the column.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// The column name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ComputeObservation struct {
}

type ComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type ComputeQueryObservation struct {
}

type ComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ConditionalFormatsObservation struct {
}

type ConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type CustomLinkObservation struct {
}

type CustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type DashboardObservation struct {
	DashboardListsRemoved []*float64 `json:"dashboardListsRemoved,omitempty" tf:"dashboard_lists_removed,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DashboardParameters struct {

	// A list of dashboard lists this dashboard belongs to.
	// +kubebuilder:validation:Optional
	DashboardLists []*float64 `json:"dashboardLists,omitempty" tf:"dashboard_lists,omitempty"`

	// The description of the dashboard.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether this dashboard is read-only. **Deprecated.** Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
	// +kubebuilder:validation:Optional
	IsReadOnly *bool `json:"isReadOnly,omitempty" tf:"is_read_only,omitempty"`

	// The layout type of the dashboard. Valid values are `ordered`, `free`.
	// +kubebuilder:validation:Required
	LayoutType *string `json:"layoutType" tf:"layout_type,omitempty"`

	// The list of handles for the users to notify when changes are made to this dashboard.
	// +kubebuilder:validation:Optional
	NotifyList []*string `json:"notifyList,omitempty" tf:"notify_list,omitempty"`

	// The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it's set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
	// +kubebuilder:validation:Optional
	ReflowType *string `json:"reflowType,omitempty" tf:"reflow_type,omitempty"`

	// UUIDs of roles whose associated users are authorized to edit the dashboard.
	// +kubebuilder:validation:Optional
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// The list of template variables for this dashboard.
	// +kubebuilder:validation:Optional
	TemplateVariable []TemplateVariableParameters `json:"templateVariable,omitempty" tf:"template_variable,omitempty"`

	// The list of selectable template variable presets for this dashboard.
	// +kubebuilder:validation:Optional
	TemplateVariablePreset []TemplateVariablePresetParameters `json:"templateVariablePreset,omitempty" tf:"template_variable_preset,omitempty"`

	// The title of the dashboard.
	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`

	// The URL of the dashboard.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The list of widgets to display on the dashboard.
	// +kubebuilder:validation:Optional
	Widget []WidgetParameters `json:"widget,omitempty" tf:"widget,omitempty"`
}

type DistributionDefinitionObservation struct {
}

type DistributionDefinitionParameters struct {

	// The size of the legend displayed in the widget.
	// +kubebuilder:validation:Optional
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Request []DistributionDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// Whether or not to show the legend on this widget.
	// +kubebuilder:validation:Optional
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type DistributionDefinitionRequestApmQueryComputeQueryObservation struct {
}

type DistributionDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestApmQueryGroupByObservation struct {
}

type DistributionDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []DistributionDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type DistributionDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type DistributionDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type DistributionDefinitionRequestApmQueryMultiComputeObservation struct {
}

type DistributionDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestApmQueryObservation struct {
}

type DistributionDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []DistributionDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []DistributionDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []DistributionDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type DistributionDefinitionRequestLogQueryComputeQueryObservation struct {
}

type DistributionDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestLogQueryGroupByObservation struct {
}

type DistributionDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []DistributionDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type DistributionDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type DistributionDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type DistributionDefinitionRequestLogQueryMultiComputeObservation struct {
}

type DistributionDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestLogQueryObservation struct {
}

type DistributionDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []DistributionDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []DistributionDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []DistributionDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type DistributionDefinitionRequestObservation struct {
}

type DistributionDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []RequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []RequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []RequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []RequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []StyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type DistributionDefinitionRequestProcessQueryObservation struct {
}

type DistributionDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type DistributionDefinitionRequestRumQueryComputeQueryObservation struct {
}

type DistributionDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestRumQueryGroupByObservation struct {
}

type DistributionDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []DistributionDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type DistributionDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type DistributionDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type DistributionDefinitionRequestRumQueryMultiComputeObservation struct {
}

type DistributionDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestRumQueryObservation struct {
}

type DistributionDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []DistributionDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []DistributionDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []DistributionDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type DistributionDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryGroupByObservation struct {
}

type DistributionDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []DistributionDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type DistributionDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type DistributionDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type DistributionDefinitionRequestSecurityQueryObservation struct {
}

type DistributionDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []DistributionDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []DistributionDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []DistributionDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type EventObservation struct {
}

type EventParameters struct {

	// The event query to use in the widget.
	// +kubebuilder:validation:Required
	Q *string `json:"q" tf:"q,omitempty"`

	// The execution method for multi-value filters.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`
}

type EventQueryComputeObservation struct {
}

type EventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type EventQueryGroupByObservation struct {
}

type EventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []SortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type EventQueryGroupBySortObservation struct {
}

type EventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type EventQueryObservation struct {
}

type EventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []ComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []EventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []SearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type EventQuerySearchObservation struct {
}

type EventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type EventStreamDefinitionObservation struct {
}

type EventStreamDefinitionParameters struct {

	// The size to use to display an event. Valid values are `s`, `l`.
	// +kubebuilder:validation:Optional
	EventSize *string `json:"eventSize,omitempty" tf:"event_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// The execution method for multi-value filters, options: `and` or `or`.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type EventTimelineDefinitionObservation struct {
}

type EventTimelineDefinitionParameters struct {

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// The execution method for multi-value filters, options: `and` or `or`.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type FillApmQueryComputeQueryObservation struct {
}

type FillApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillApmQueryGroupByObservation struct {
}

type FillApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []FillApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type FillApmQueryGroupBySortQueryObservation struct {
}

type FillApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type FillApmQueryMultiComputeObservation struct {
}

type FillApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillApmQueryObservation struct {
}

type FillApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []FillApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []FillApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []FillApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type FillLogQueryComputeQueryObservation struct {
}

type FillLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillLogQueryGroupByObservation struct {
}

type FillLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []FillLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type FillLogQueryGroupBySortQueryObservation struct {
}

type FillLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type FillLogQueryMultiComputeObservation struct {
}

type FillLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillLogQueryObservation struct {
}

type FillLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []FillLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []FillLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []FillLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type FillObservation struct {
}

type FillParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []FillApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []FillLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []FillProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []FillRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []FillSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type FillProcessQueryObservation struct {
}

type FillProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type FillRumQueryComputeQueryObservation struct {
}

type FillRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillRumQueryGroupByObservation struct {
}

type FillRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []FillRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type FillRumQueryGroupBySortQueryObservation struct {
}

type FillRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type FillRumQueryMultiComputeObservation struct {
}

type FillRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillRumQueryObservation struct {
}

type FillRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []FillRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []FillRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []FillRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type FillSecurityQueryComputeQueryObservation struct {
}

type FillSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillSecurityQueryGroupByObservation struct {
}

type FillSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []FillSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type FillSecurityQueryGroupBySortQueryObservation struct {
}

type FillSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type FillSecurityQueryMultiComputeObservation struct {
}

type FillSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type FillSecurityQueryObservation struct {
}

type FillSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []FillSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []FillSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []FillSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type FormulaConditionalFormatsObservation struct {
}

type FormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type FormulaLimitObservation struct {
}

type FormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type FormulaObservation struct {
}

type FormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []ConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []LimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type FreeTextDefinitionObservation struct {
}

type FreeTextDefinitionParameters struct {

	// The color of the text in the widget.
	// +kubebuilder:validation:Optional
	Color *string `json:"color,omitempty" tf:"color,omitempty"`

	// The size of the text in the widget.
	// +kubebuilder:validation:Optional
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// The text to display in the widget.
	// +kubebuilder:validation:Required
	Text *string `json:"text" tf:"text,omitempty"`

	// The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`
}

type GeomapDefinitionCustomLinkObservation struct {
}

type GeomapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type GeomapDefinitionObservation struct {
}

type GeomapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []GeomapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `log_query` or `rum_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []GeomapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []GeomapDefinitionStyleParameters `json:"style,omitempty" tf:"style,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The view of the world that the map should render.
	// +kubebuilder:validation:Required
	View []ViewParameters `json:"view" tf:"view,omitempty"`
}

type GeomapDefinitionRequestFormulaConditionalFormatsObservation struct {
}

type GeomapDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type GeomapDefinitionRequestFormulaLimitObservation struct {
}

type GeomapDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type GeomapDefinitionRequestFormulaObservation struct {
}

type GeomapDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []GeomapDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []GeomapDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type GeomapDefinitionRequestLogQueryComputeQueryObservation struct {
}

type GeomapDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type GeomapDefinitionRequestLogQueryGroupByObservation struct {
}

type GeomapDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type GeomapDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type GeomapDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type GeomapDefinitionRequestLogQueryMultiComputeObservation struct {
}

type GeomapDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type GeomapDefinitionRequestLogQueryObservation struct {
}

type GeomapDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []GeomapDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []GeomapDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []GeomapDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type GeomapDefinitionRequestObservation struct {
}

type GeomapDefinitionRequestParameters struct {

	// +kubebuilder:validation:Optional
	Formula []RequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []GeomapDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []RequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []GeomapDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`
}

type GeomapDefinitionRequestQueryApmDependencyStatsQueryObservation struct {
}

type GeomapDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type GeomapDefinitionRequestQueryApmResourceStatsQueryObservation struct {
}

type GeomapDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type GeomapDefinitionRequestQueryEventQueryGroupByObservation struct {
}

type GeomapDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []QueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type GeomapDefinitionRequestQueryEventQueryObservation struct {
}

type GeomapDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []RequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []GeomapDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []RequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type GeomapDefinitionRequestQueryMetricQueryObservation struct {
}

type GeomapDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type GeomapDefinitionRequestQueryObservation struct {
}

type GeomapDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []GeomapDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []GeomapDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []GeomapDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []GeomapDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []GeomapDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type GeomapDefinitionRequestQueryProcessQueryObservation struct {
}

type GeomapDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type GeomapDefinitionRequestRumQueryComputeQueryObservation struct {
}

type GeomapDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type GeomapDefinitionRequestRumQueryGroupByObservation struct {
}

type GeomapDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []GeomapDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type GeomapDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type GeomapDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type GeomapDefinitionRequestRumQueryMultiComputeObservation struct {
}

type GeomapDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type GeomapDefinitionRequestRumQueryObservation struct {
}

type GeomapDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []GeomapDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []GeomapDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []GeomapDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type GeomapDefinitionStyleObservation struct {
}

type GeomapDefinitionStyleParameters struct {

	// The color palette to apply to the widget.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// A Boolean indicating whether to flip the palette tones.
	// +kubebuilder:validation:Required
	PaletteFlip *bool `json:"paletteFlip" tf:"palette_flip,omitempty"`
}

type GeomapDefinitionViewObservation struct {
}

type GeomapDefinitionViewParameters struct {

	// The two-letter ISO code of a country to focus the map on (or `WORLD`).
	// +kubebuilder:validation:Required
	Focus *string `json:"focus" tf:"focus,omitempty"`
}

type GroupByObservation struct {
}

type GroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type GroupBySortObservation struct {
}

type GroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type GroupBySortQueryObservation struct {
}

type GroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type GroupDefinitionObservation struct {
}

type GroupDefinitionParameters struct {

	// The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
	// +kubebuilder:validation:Optional
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// The image URL to display as a banner for the group.
	// +kubebuilder:validation:Optional
	BannerImg *string `json:"bannerImg,omitempty" tf:"banner_img,omitempty"`

	// The layout type of the group. Valid values are `ordered`.
	// +kubebuilder:validation:Required
	LayoutType *string `json:"layoutType" tf:"layout_type,omitempty"`

	// Whether to show the title or not.
	// +kubebuilder:validation:Optional
	ShowTitle *bool `json:"showTitle,omitempty" tf:"show_title,omitempty"`

	// The title of the group.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The list of widgets in this group.
	// +kubebuilder:validation:Required
	Widget []GroupDefinitionWidgetParameters `json:"widget" tf:"widget,omitempty"`
}

type GroupDefinitionWidgetObservation struct {
	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupDefinitionWidgetParameters struct {

	// The definition for a Alert Graph widget.
	// +kubebuilder:validation:Optional
	AlertGraphDefinition []WidgetAlertGraphDefinitionParameters `json:"alertGraphDefinition,omitempty" tf:"alert_graph_definition,omitempty"`

	// The definition for a Alert Value widget.
	// +kubebuilder:validation:Optional
	AlertValueDefinition []WidgetAlertValueDefinitionParameters `json:"alertValueDefinition,omitempty" tf:"alert_value_definition,omitempty"`

	// The definition for a Change widget.
	// +kubebuilder:validation:Optional
	ChangeDefinition []WidgetChangeDefinitionParameters `json:"changeDefinition,omitempty" tf:"change_definition,omitempty"`

	// The definition for a Check Status widget.
	// +kubebuilder:validation:Optional
	CheckStatusDefinition []WidgetCheckStatusDefinitionParameters `json:"checkStatusDefinition,omitempty" tf:"check_status_definition,omitempty"`

	// The definition for a Distribution widget.
	// +kubebuilder:validation:Optional
	DistributionDefinition []WidgetDistributionDefinitionParameters `json:"distributionDefinition,omitempty" tf:"distribution_definition,omitempty"`

	// The definition for a Event Stream widget.
	// +kubebuilder:validation:Optional
	EventStreamDefinition []WidgetEventStreamDefinitionParameters `json:"eventStreamDefinition,omitempty" tf:"event_stream_definition,omitempty"`

	// The definition for a Event Timeline widget.
	// +kubebuilder:validation:Optional
	EventTimelineDefinition []WidgetEventTimelineDefinitionParameters `json:"eventTimelineDefinition,omitempty" tf:"event_timeline_definition,omitempty"`

	// The definition for a Free Text widget.
	// +kubebuilder:validation:Optional
	FreeTextDefinition []WidgetFreeTextDefinitionParameters `json:"freeTextDefinition,omitempty" tf:"free_text_definition,omitempty"`

	// The definition for a Geomap widget.
	// +kubebuilder:validation:Optional
	GeomapDefinition []WidgetGeomapDefinitionParameters `json:"geomapDefinition,omitempty" tf:"geomap_definition,omitempty"`

	// The definition for a Heatmap widget.
	// +kubebuilder:validation:Optional
	HeatmapDefinition []HeatmapDefinitionParameters `json:"heatmapDefinition,omitempty" tf:"heatmap_definition,omitempty"`

	// The definition for a Hostmap widget.
	// +kubebuilder:validation:Optional
	HostmapDefinition []HostmapDefinitionParameters `json:"hostmapDefinition,omitempty" tf:"hostmap_definition,omitempty"`

	// The definition for an Iframe widget.
	// +kubebuilder:validation:Optional
	IframeDefinition []IframeDefinitionParameters `json:"iframeDefinition,omitempty" tf:"iframe_definition,omitempty"`

	// The definition for an Image widget
	// +kubebuilder:validation:Optional
	ImageDefinition []ImageDefinitionParameters `json:"imageDefinition,omitempty" tf:"image_definition,omitempty"`

	// The definition for an Log Stream widget.
	// +kubebuilder:validation:Optional
	LogStreamDefinition []LogStreamDefinitionParameters `json:"logStreamDefinition,omitempty" tf:"log_stream_definition,omitempty"`

	// The definition for an Manage Status widget.
	// +kubebuilder:validation:Optional
	ManageStatusDefinition []ManageStatusDefinitionParameters `json:"manageStatusDefinition,omitempty" tf:"manage_status_definition,omitempty"`

	// The definition for a Note widget.
	// +kubebuilder:validation:Optional
	NoteDefinition []NoteDefinitionParameters `json:"noteDefinition,omitempty" tf:"note_definition,omitempty"`

	// The definition for a Query Table widget.
	// +kubebuilder:validation:Optional
	QueryTableDefinition []QueryTableDefinitionParameters `json:"queryTableDefinition,omitempty" tf:"query_table_definition,omitempty"`

	// The definition for a Query Value widget.
	// +kubebuilder:validation:Optional
	QueryValueDefinition []QueryValueDefinitionParameters `json:"queryValueDefinition,omitempty" tf:"query_value_definition,omitempty"`

	// The definition for a Scatterplot widget.
	// +kubebuilder:validation:Optional
	ScatterplotDefinition []ScatterplotDefinitionParameters `json:"scatterplotDefinition,omitempty" tf:"scatterplot_definition,omitempty"`

	// The definition for a Service Level Objective widget.
	// +kubebuilder:validation:Optional
	ServiceLevelObjectiveDefinition []ServiceLevelObjectiveDefinitionParameters `json:"serviceLevelObjectiveDefinition,omitempty" tf:"service_level_objective_definition,omitempty"`

	// The definition for a Service Map widget.
	// +kubebuilder:validation:Optional
	ServicemapDefinition []ServicemapDefinitionParameters `json:"servicemapDefinition,omitempty" tf:"servicemap_definition,omitempty"`

	// The definition for a Sunburst widget.
	// +kubebuilder:validation:Optional
	SunburstDefinition []SunburstDefinitionParameters `json:"sunburstDefinition,omitempty" tf:"sunburst_definition,omitempty"`

	// The definition for a Timeseries widget.
	// +kubebuilder:validation:Optional
	TimeseriesDefinition []TimeseriesDefinitionParameters `json:"timeseriesDefinition,omitempty" tf:"timeseries_definition,omitempty"`

	// The definition for a Toplist widget.
	// +kubebuilder:validation:Optional
	ToplistDefinition []ToplistDefinitionParameters `json:"toplistDefinition,omitempty" tf:"toplist_definition,omitempty"`

	// The definition for a Trace Service widget.
	// +kubebuilder:validation:Optional
	TraceServiceDefinition []TraceServiceDefinitionParameters `json:"traceServiceDefinition,omitempty" tf:"trace_service_definition,omitempty"`

	// The layout of the widget on a 'free' dashboard.
	// +kubebuilder:validation:Optional
	WidgetLayout []WidgetLayoutParameters `json:"widgetLayout,omitempty" tf:"widget_layout,omitempty"`
}

type HeatmapDefinitionCustomLinkObservation struct {
}

type HeatmapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type HeatmapDefinitionEventObservation struct {
}

type HeatmapDefinitionEventParameters struct {

	// The event query to use in the widget.
	// +kubebuilder:validation:Required
	Q *string `json:"q" tf:"q,omitempty"`

	// The execution method for multi-value filters.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`
}

type HeatmapDefinitionObservation struct {
}

type HeatmapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []HeatmapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Event []EventParameters `json:"event,omitempty" tf:"event,omitempty"`

	// The size of the legend displayed in the widget.
	// +kubebuilder:validation:Optional
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Request []HeatmapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// Whether or not to show the legend on this widget.
	// +kubebuilder:validation:Optional
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the Y-Axis Controls. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	Yaxis []YaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type HeatmapDefinitionRequestApmQueryComputeQueryObservation struct {
}

type HeatmapDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestApmQueryGroupByObservation struct {
}

type HeatmapDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []HeatmapDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type HeatmapDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type HeatmapDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type HeatmapDefinitionRequestApmQueryMultiComputeObservation struct {
}

type HeatmapDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestApmQueryObservation struct {
}

type HeatmapDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []HeatmapDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []HeatmapDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []HeatmapDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type HeatmapDefinitionRequestLogQueryComputeQueryObservation struct {
}

type HeatmapDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestLogQueryGroupByObservation struct {
}

type HeatmapDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []HeatmapDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type HeatmapDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type HeatmapDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type HeatmapDefinitionRequestLogQueryMultiComputeObservation struct {
}

type HeatmapDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestLogQueryObservation struct {
}

type HeatmapDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []HeatmapDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []HeatmapDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []HeatmapDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type HeatmapDefinitionRequestObservation struct {
}

type HeatmapDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []HeatmapDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []HeatmapDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []HeatmapDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []HeatmapDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []HeatmapDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []HeatmapDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type HeatmapDefinitionRequestProcessQueryObservation struct {
}

type HeatmapDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type HeatmapDefinitionRequestRumQueryComputeQueryObservation struct {
}

type HeatmapDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestRumQueryGroupByObservation struct {
}

type HeatmapDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []HeatmapDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type HeatmapDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type HeatmapDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type HeatmapDefinitionRequestRumQueryMultiComputeObservation struct {
}

type HeatmapDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestRumQueryObservation struct {
}

type HeatmapDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []HeatmapDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []HeatmapDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []HeatmapDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type HeatmapDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryGroupByObservation struct {
}

type HeatmapDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []HeatmapDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type HeatmapDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type HeatmapDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type HeatmapDefinitionRequestSecurityQueryObservation struct {
}

type HeatmapDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []HeatmapDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []HeatmapDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []HeatmapDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type HeatmapDefinitionRequestStyleObservation struct {
}

type HeatmapDefinitionRequestStyleParameters struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type HeatmapDefinitionYaxisObservation struct {
}

type HeatmapDefinitionYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type HostmapDefinitionCustomLinkObservation struct {
}

type HostmapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type HostmapDefinitionObservation struct {
}

type HostmapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []HostmapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The list of tags to group nodes by.
	// +kubebuilder:validation:Optional
	Group []*string `json:"group,omitempty" tf:"group,omitempty"`

	// A Boolean indicating whether to show ungrouped nodes.
	// +kubebuilder:validation:Optional
	NoGroupHosts *bool `json:"noGroupHosts,omitempty" tf:"no_group_hosts,omitempty"`

	// A Boolean indicating whether to show nodes with no metrics.
	// +kubebuilder:validation:Optional
	NoMetricHosts *bool `json:"noMetricHosts,omitempty" tf:"no_metric_hosts,omitempty"`

	// The type of node used. Valid values are `host`, `container`.
	// +kubebuilder:validation:Optional
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Request []HostmapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The list of tags to filter nodes by.
	// +kubebuilder:validation:Optional
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []HostmapDefinitionStyleParameters `json:"style,omitempty" tf:"style,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type HostmapDefinitionRequestObservation struct {
}

type HostmapDefinitionRequestParameters struct {

	// The query used to fill the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Fill []FillParameters `json:"fill,omitempty" tf:"fill,omitempty"`

	// The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Size []SizeParameters `json:"size,omitempty" tf:"size,omitempty"`
}

type HostmapDefinitionStyleObservation struct {
}

type HostmapDefinitionStyleParameters struct {

	// The max value to use to color the map.
	// +kubebuilder:validation:Optional
	FillMax *string `json:"fillMax,omitempty" tf:"fill_max,omitempty"`

	// The min value to use to color the map.
	// +kubebuilder:validation:Optional
	FillMin *string `json:"fillMin,omitempty" tf:"fill_min,omitempty"`

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// A Boolean indicating whether to flip the palette tones.
	// +kubebuilder:validation:Optional
	PaletteFlip *bool `json:"paletteFlip,omitempty" tf:"palette_flip,omitempty"`
}

type IframeDefinitionObservation struct {
}

type IframeDefinitionParameters struct {

	// The URL to use as a data source for the widget.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type ImageDefinitionObservation struct {
}

type ImageDefinitionParameters struct {

	// Whether to display a background or not.
	// +kubebuilder:validation:Optional
	HasBackground *bool `json:"hasBackground,omitempty" tf:"has_background,omitempty"`

	// Whether to display a border or not.
	// +kubebuilder:validation:Optional
	HasBorder *bool `json:"hasBorder,omitempty" tf:"has_border,omitempty"`

	// The horizontal alignment for the widget. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	HorizontalAlign *string `json:"horizontalAlign,omitempty" tf:"horizontal_align,omitempty"`

	// The margins to use around the image. Note: `small` and `large` values are deprecated. Valid values are `sm`, `md`, `lg`, `small`, `large`.
	// +kubebuilder:validation:Optional
	Margin *string `json:"margin,omitempty" tf:"margin,omitempty"`

	// The preferred method to adapt the dimensions of the image. The values are based on the image `object-fit` CSS properties. Note: `zoom`, `fit` and `center` values are deprecated. Valid values are `fill`, `contain`, `cover`, `none`, `scale-down`, `zoom`, `fit`, `center`.
	// +kubebuilder:validation:Optional
	Sizing *string `json:"sizing,omitempty" tf:"sizing,omitempty"`

	// The URL to use as a data source for the widget.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// The URL in dark mode to use as a data source for the widget.
	// +kubebuilder:validation:Optional
	URLDarkTheme *string `json:"urlDarkTheme,omitempty" tf:"url_dark_theme,omitempty"`

	// The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
	// +kubebuilder:validation:Optional
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`
}

type LegendInlineObservation struct {
}

type LegendInlineParameters struct {

	// Whether to hide the percentages of the groups.
	// +kubebuilder:validation:Optional
	HidePercent *bool `json:"hidePercent,omitempty" tf:"hide_percent,omitempty"`

	// Whether to hide the values of the groups.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// The type of legend (inline or automatic). Valid values are `inline`, `automatic`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type LegendTableObservation struct {
}

type LegendTableParameters struct {

	// The type of legend (table or none). Valid values are `table`, `none`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type LimitObservation struct {
}

type LimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type LogQueryComputeQueryObservation struct {
}

type LogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type LogQueryGroupByObservation struct {
}

type LogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []GroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type LogQueryGroupBySortQueryObservation struct {
}

type LogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type LogQueryMultiComputeObservation struct {
}

type LogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type LogQueryObservation struct {
}

type LogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []LogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []LogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []LogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type LogStreamDefinitionObservation struct {
}

type LogStreamDefinitionParameters struct {

	// Stringified list of columns to use, for example: `["column1","column2","column3"]`.
	// +kubebuilder:validation:Optional
	Columns []*string `json:"columns,omitempty" tf:"columns,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The number of log lines to display. Valid values are `inline`, `expanded-md`, `expanded-lg`.
	// +kubebuilder:validation:Optional
	MessageDisplay *string `json:"messageDisplay,omitempty" tf:"message_display,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// If the date column should be displayed.
	// +kubebuilder:validation:Optional
	ShowDateColumn *bool `json:"showDateColumn,omitempty" tf:"show_date_column,omitempty"`

	// If the message column should be displayed.
	// +kubebuilder:validation:Optional
	ShowMessageColumn *bool `json:"showMessageColumn,omitempty" tf:"show_message_column,omitempty"`

	// The facet and order to sort the data, for example: `{"column": "time", "order": "desc"}`.
	// +kubebuilder:validation:Optional
	Sort []LogStreamDefinitionSortParameters `json:"sort,omitempty" tf:"sort,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type LogStreamDefinitionSortObservation struct {
}

type LogStreamDefinitionSortParameters struct {

	// The facet path for the column
	// +kubebuilder:validation:Required
	Column *string `json:"column" tf:"column,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ManageStatusDefinitionObservation struct {
}

type ManageStatusDefinitionParameters struct {

	// Whether to colorize text or background. Valid values are `background`, `text`.
	// +kubebuilder:validation:Optional
	ColorPreference *string `json:"colorPreference,omitempty" tf:"color_preference,omitempty"`

	// The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
	// +kubebuilder:validation:Optional
	DisplayFormat *string `json:"displayFormat,omitempty" tf:"display_format,omitempty"`

	// A Boolean indicating whether to hide empty categories.
	// +kubebuilder:validation:Optional
	HideZeroCounts *bool `json:"hideZeroCounts,omitempty" tf:"hide_zero_counts,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// A Boolean indicating whether to show when monitors/groups last triggered.
	// +kubebuilder:validation:Optional
	ShowLastTriggered *bool `json:"showLastTriggered,omitempty" tf:"show_last_triggered,omitempty"`

	// The method to sort the monitors. Valid values are `name`, `group`, `status`, `tags`, `triggered`, `group,asc`, `group,desc`, `name,asc`, `name,desc`, `status,asc`, `status,desc`, `tags,asc`, `tags,desc`, `triggered,asc`, `triggered,desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// The summary type to use. Valid values are `monitors`, `groups`, `combined`.
	// +kubebuilder:validation:Optional
	SummaryType *string `json:"summaryType,omitempty" tf:"summary_type,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type MarkerObservation struct {
}

type MarkerParameters struct {

	// How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
	// +kubebuilder:validation:Optional
	DisplayType *string `json:"displayType,omitempty" tf:"display_type,omitempty"`

	// A label for the line or range.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// A mathematical expression describing the marker, for example: `y > 1`, `-5 < y < 0`, `y = 19`.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type MetadataObservation struct {
}

type MetadataParameters struct {

	// The expression alias.
	// +kubebuilder:validation:Optional
	AliasName *string `json:"aliasName,omitempty" tf:"alias_name,omitempty"`

	// The expression name.
	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`
}

type MetricQueryObservation struct {
}

type MetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type MultiComputeObservation struct {
}

type MultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type NetworkQueryComputeQueryObservation struct {
}

type NetworkQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type NetworkQueryGroupByObservation struct {
}

type NetworkQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []NetworkQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type NetworkQueryGroupBySortQueryObservation struct {
}

type NetworkQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type NetworkQueryMultiComputeObservation struct {
}

type NetworkQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type NetworkQueryObservation struct {
}

type NetworkQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []NetworkQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []NetworkQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []NetworkQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type NoteDefinitionObservation struct {
}

type NoteDefinitionParameters struct {

	// The background color of the note.
	// +kubebuilder:validation:Optional
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// The content of the note.
	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// The size of the text.
	// +kubebuilder:validation:Optional
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// Whether to add padding or not.
	// +kubebuilder:validation:Optional
	HasPadding *bool `json:"hasPadding,omitempty" tf:"has_padding,omitempty"`

	// Whether to show a tick or not.
	// +kubebuilder:validation:Optional
	ShowTick *bool `json:"showTick,omitempty" tf:"show_tick,omitempty"`

	// The alignment of the widget's text. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// When `tick = true`, a string indicating on which side of the widget the tick should be displayed. Valid values are `bottom`, `left`, `right`, `top`.
	// +kubebuilder:validation:Optional
	TickEdge *string `json:"tickEdge,omitempty" tf:"tick_edge,omitempty"`

	// When `tick = true`, a string with a percent sign indicating the position of the tick, for example: `tick_pos = "50%"` is centered alignment.
	// +kubebuilder:validation:Optional
	TickPos *string `json:"tickPos,omitempty" tf:"tick_pos,omitempty"`

	// The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
	// +kubebuilder:validation:Optional
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`
}

type ProcessQueryObservation struct {
}

type ProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type QueryApmDependencyStatsQueryObservation struct {
}

type QueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type QueryApmResourceStatsQueryObservation struct {
}

type QueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type QueryEventQueryComputeObservation struct {
}

type QueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type QueryEventQueryGroupByObservation struct {
}

type QueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []GroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type QueryEventQueryGroupBySortObservation struct {
}

type QueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryEventQueryObservation struct {
}

type QueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []EventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []QueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []EventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type QueryEventQuerySearchObservation struct {
}

type QueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type QueryMetricQueryObservation struct {
}

type QueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type QueryObservation struct {
}

type QueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []ApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []ApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []EventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []MetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []QueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type QueryProcessQueryObservation struct {
}

type QueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type QueryTableDefinitionCustomLinkObservation struct {
}

type QueryTableDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type QueryTableDefinitionObservation struct {
}

type QueryTableDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []QueryTableDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Controls the display of the search bar. Valid values are `always`, `never`, `auto`.
	// +kubebuilder:validation:Optional
	HasSearchBar *string `json:"hasSearchBar,omitempty" tf:"has_search_bar,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []QueryTableDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type QueryTableDefinitionRequestApmQueryComputeQueryObservation struct {
}

type QueryTableDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestApmQueryGroupByObservation struct {
}

type QueryTableDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryTableDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryTableDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type QueryTableDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestApmQueryMultiComputeObservation struct {
}

type QueryTableDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestApmQueryObservation struct {
}

type QueryTableDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryTableDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryTableDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryTableDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryTableDefinitionRequestConditionalFormatsObservation struct {
}

type QueryTableDefinitionRequestConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type QueryTableDefinitionRequestFormulaConditionalFormatsObservation struct {
}

type QueryTableDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type QueryTableDefinitionRequestFormulaLimitObservation struct {
}

type QueryTableDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestFormulaObservation struct {
}

type QueryTableDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []QueryTableDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []QueryTableDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type QueryTableDefinitionRequestLogQueryComputeQueryObservation struct {
}

type QueryTableDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestLogQueryGroupByObservation struct {
}

type QueryTableDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryTableDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryTableDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type QueryTableDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestLogQueryMultiComputeObservation struct {
}

type QueryTableDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestLogQueryObservation struct {
}

type QueryTableDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryTableDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryTableDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryTableDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryTableDefinitionRequestObservation struct {
}

type QueryTableDefinitionRequestParameters struct {

	// The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The alias for the column name (defaults to metric name).
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []QueryTableDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// +kubebuilder:validation:Optional
	ApmStatsQuery []ApmStatsQueryParameters `json:"apmStatsQuery,omitempty" tf:"apm_stats_query,omitempty"`

	// A list of display modes for each table cell. List items one of `number`, `bar`. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode []*string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background, depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []RequestConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []QueryTableDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The number of lines to show in the table.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []QueryTableDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The sort order for the rows. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []QueryTableDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []QueryTableDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []QueryTableDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []QueryTableDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type QueryTableDefinitionRequestProcessQueryObservation struct {
}

type QueryTableDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type QueryTableDefinitionRequestQueryApmDependencyStatsQueryObservation struct {
}

type QueryTableDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type QueryTableDefinitionRequestQueryApmResourceStatsQueryObservation struct {
}

type QueryTableDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQueryComputeObservation struct {
}

type QueryTableDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQueryGroupByObservation struct {
}

type QueryTableDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []RequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQueryGroupBySortObservation struct {
}

type QueryTableDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQueryObservation struct {
}

type QueryTableDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []QueryTableDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []QueryTableDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []QueryTableDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type QueryTableDefinitionRequestQueryEventQuerySearchObservation struct {
}

type QueryTableDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type QueryTableDefinitionRequestQueryMetricQueryObservation struct {
}

type QueryTableDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type QueryTableDefinitionRequestQueryObservation struct {
}

type QueryTableDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []QueryTableDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []QueryTableDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []QueryTableDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []QueryTableDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []QueryTableDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type QueryTableDefinitionRequestQueryProcessQueryObservation struct {
}

type QueryTableDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type QueryTableDefinitionRequestRumQueryComputeQueryObservation struct {
}

type QueryTableDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestRumQueryGroupByObservation struct {
}

type QueryTableDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryTableDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryTableDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type QueryTableDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestRumQueryMultiComputeObservation struct {
}

type QueryTableDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestRumQueryObservation struct {
}

type QueryTableDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryTableDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryTableDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryTableDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type QueryTableDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryGroupByObservation struct {
}

type QueryTableDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryTableDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type QueryTableDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type QueryTableDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryTableDefinitionRequestSecurityQueryObservation struct {
}

type QueryTableDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryTableDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryTableDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryTableDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionCustomLinkObservation struct {
}

type QueryValueDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type QueryValueDefinitionObservation struct {
}

type QueryValueDefinitionParameters struct {

	// A Boolean indicating whether to automatically scale the tile.
	// +kubebuilder:validation:Optional
	Autoscale *bool `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []QueryValueDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The unit for the value displayed in the widget.
	// +kubebuilder:validation:Optional
	CustomUnit *string `json:"customUnit,omitempty" tf:"custom_unit,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The precision to use when displaying the tile.
	// +kubebuilder:validation:Optional
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []QueryValueDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The alignment of the widget's text. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type QueryValueDefinitionRequestApmQueryComputeQueryObservation struct {
}

type QueryValueDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestApmQueryGroupByObservation struct {
}

type QueryValueDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryValueDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type QueryValueDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestApmQueryMultiComputeObservation struct {
}

type QueryValueDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestApmQueryObservation struct {
}

type QueryValueDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryValueDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryValueDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryValueDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryComputeQueryObservation struct {
}

type QueryValueDefinitionRequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryGroupByObservation struct {
}

type QueryValueDefinitionRequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryValueDefinitionRequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryGroupBySortQueryObservation struct {
}

type QueryValueDefinitionRequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryMultiComputeObservation struct {
}

type QueryValueDefinitionRequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestAuditQueryObservation struct {
}

type QueryValueDefinitionRequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryValueDefinitionRequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryValueDefinitionRequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryValueDefinitionRequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestConditionalFormatsObservation struct {
}

type QueryValueDefinitionRequestConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type QueryValueDefinitionRequestFormulaConditionalFormatsObservation struct {
}

type QueryValueDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type QueryValueDefinitionRequestFormulaLimitObservation struct {
}

type QueryValueDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestFormulaObservation struct {
}

type QueryValueDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []QueryValueDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []QueryValueDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type QueryValueDefinitionRequestLogQueryComputeQueryObservation struct {
}

type QueryValueDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestLogQueryGroupByObservation struct {
}

type QueryValueDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryValueDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type QueryValueDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestLogQueryMultiComputeObservation struct {
}

type QueryValueDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestLogQueryObservation struct {
}

type QueryValueDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryValueDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryValueDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryValueDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestObservation struct {
}

type QueryValueDefinitionRequestParameters struct {

	// The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []QueryValueDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []AuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []QueryValueDefinitionRequestConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []QueryValueDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []QueryValueDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []QueryValueDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []QueryValueDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []QueryValueDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []QueryValueDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type QueryValueDefinitionRequestProcessQueryObservation struct {
}

type QueryValueDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type QueryValueDefinitionRequestQueryApmDependencyStatsQueryObservation struct {
}

type QueryValueDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type QueryValueDefinitionRequestQueryApmResourceStatsQueryObservation struct {
}

type QueryValueDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQueryComputeObservation struct {
}

type QueryValueDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQueryGroupByObservation struct {
}

type QueryValueDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []QueryValueDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQueryGroupBySortObservation struct {
}

type QueryValueDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQueryObservation struct {
}

type QueryValueDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []QueryValueDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []QueryValueDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []QueryValueDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type QueryValueDefinitionRequestQueryEventQuerySearchObservation struct {
}

type QueryValueDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type QueryValueDefinitionRequestQueryMetricQueryObservation struct {
}

type QueryValueDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type QueryValueDefinitionRequestQueryObservation struct {
}

type QueryValueDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []QueryValueDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []QueryValueDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []QueryValueDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []QueryValueDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []QueryValueDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type QueryValueDefinitionRequestQueryProcessQueryObservation struct {
}

type QueryValueDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type QueryValueDefinitionRequestRumQueryComputeQueryObservation struct {
}

type QueryValueDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestRumQueryGroupByObservation struct {
}

type QueryValueDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryValueDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type QueryValueDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestRumQueryMultiComputeObservation struct {
}

type QueryValueDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestRumQueryObservation struct {
}

type QueryValueDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryValueDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryValueDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryValueDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type QueryValueDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryGroupByObservation struct {
}

type QueryValueDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []QueryValueDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type QueryValueDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type QueryValueDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type QueryValueDefinitionRequestSecurityQueryObservation struct {
}

type QueryValueDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []QueryValueDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []QueryValueDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []QueryValueDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestApmQueryComputeQueryObservation struct {
}

type RequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestApmQueryGroupByObservation struct {
}

type RequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestApmQueryGroupBySortQueryObservation struct {
}

type RequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestApmQueryMultiComputeObservation struct {
}

type RequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestApmQueryObservation struct {
}

type RequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestApmStatsQueryObservation struct {
}

type RequestApmStatsQueryParameters struct {

	// Column properties used by the front end for display.
	// +kubebuilder:validation:Optional
	Columns []ApmStatsQueryColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// The environment name.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// The operation name associated with the service.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The organization's host group name and value.
	// +kubebuilder:validation:Required
	PrimaryTag *string `json:"primaryTag" tf:"primary_tag,omitempty"`

	// The resource name.
	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The level of detail for the request. Valid values are `service`, `resource`, `span`.
	// +kubebuilder:validation:Required
	RowType *string `json:"rowType" tf:"row_type,omitempty"`

	// The service name.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

type RequestAuditQueryComputeQueryObservation struct {
}

type RequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestAuditQueryGroupByObservation struct {
}

type RequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestAuditQueryGroupBySortQueryObservation struct {
}

type RequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestAuditQueryMultiComputeObservation struct {
}

type RequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestAuditQueryObservation struct {
}

type RequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestConditionalFormatsObservation struct {
}

type RequestConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type RequestFillApmQueryComputeQueryObservation struct {
}

type RequestFillApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillApmQueryGroupByObservation struct {
}

type RequestFillApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestFillApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestFillApmQueryGroupBySortQueryObservation struct {
}

type RequestFillApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestFillApmQueryMultiComputeObservation struct {
}

type RequestFillApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillApmQueryObservation struct {
}

type RequestFillApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestFillApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestFillApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestFillApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestFillLogQueryComputeQueryObservation struct {
}

type RequestFillLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillLogQueryGroupByObservation struct {
}

type RequestFillLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestFillLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestFillLogQueryGroupBySortQueryObservation struct {
}

type RequestFillLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestFillLogQueryMultiComputeObservation struct {
}

type RequestFillLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillLogQueryObservation struct {
}

type RequestFillLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestFillLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestFillLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestFillLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestFillObservation struct {
}

type RequestFillParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []RequestFillApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []RequestFillLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestFillProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []RequestFillRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []RequestFillSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type RequestFillProcessQueryObservation struct {
}

type RequestFillProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestFillRumQueryComputeQueryObservation struct {
}

type RequestFillRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillRumQueryGroupByObservation struct {
}

type RequestFillRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestFillRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestFillRumQueryGroupBySortQueryObservation struct {
}

type RequestFillRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestFillRumQueryMultiComputeObservation struct {
}

type RequestFillRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillRumQueryObservation struct {
}

type RequestFillRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestFillRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestFillRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestFillRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestFillSecurityQueryComputeQueryObservation struct {
}

type RequestFillSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillSecurityQueryGroupByObservation struct {
}

type RequestFillSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestFillSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestFillSecurityQueryGroupBySortQueryObservation struct {
}

type RequestFillSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestFillSecurityQueryMultiComputeObservation struct {
}

type RequestFillSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestFillSecurityQueryObservation struct {
}

type RequestFillSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestFillSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestFillSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestFillSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestFormulaConditionalFormatsObservation struct {
}

type RequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type RequestFormulaLimitObservation struct {
}

type RequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestFormulaObservation struct {
}

type RequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []FormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []FormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type RequestLogQueryComputeQueryObservation struct {
}

type RequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestLogQueryGroupByObservation struct {
}

type RequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []LogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestLogQueryGroupBySortQueryObservation struct {
}

type RequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestLogQueryMultiComputeObservation struct {
}

type RequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestLogQueryObservation struct {
}

type RequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestMetadataObservation struct {
}

type RequestMetadataParameters struct {

	// The expression alias.
	// +kubebuilder:validation:Optional
	AliasName *string `json:"aliasName,omitempty" tf:"alias_name,omitempty"`

	// The expression name.
	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`
}

type RequestNetworkQueryComputeQueryObservation struct {
}

type RequestNetworkQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestNetworkQueryGroupByObservation struct {
}

type RequestNetworkQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestNetworkQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestNetworkQueryGroupBySortQueryObservation struct {
}

type RequestNetworkQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestNetworkQueryMultiComputeObservation struct {
}

type RequestNetworkQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestNetworkQueryObservation struct {
}

type RequestNetworkQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestNetworkQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestNetworkQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestNetworkQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestObservation struct {
}

type RequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []ApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
	// +kubebuilder:validation:Optional
	ChangeType *string `json:"changeType,omitempty" tf:"change_type,omitempty"`

	// Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
	// +kubebuilder:validation:Optional
	CompareTo *string `json:"compareTo,omitempty" tf:"compare_to,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []FormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
	// +kubebuilder:validation:Optional
	IncreaseGood *bool `json:"increaseGood,omitempty" tf:"increase_good,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []LogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// What to order by. Valid values are `change`, `name`, `present`, `past`.
	// +kubebuilder:validation:Optional
	OrderBy *string `json:"orderBy,omitempty" tf:"order_by,omitempty"`

	// Widget sorting method. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	OrderDir *string `json:"orderDir,omitempty" tf:"order_dir,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []ProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []QueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []RumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []SecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// If set to `true`, displays the current value.
	// +kubebuilder:validation:Optional
	ShowPresent *bool `json:"showPresent,omitempty" tf:"show_present,omitempty"`
}

type RequestProcessQueryObservation struct {
}

type RequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestQueryApmDependencyStatsQueryObservation struct {
}

type RequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type RequestQueryApmResourceStatsQueryObservation struct {
}

type RequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type RequestQueryEventQueryComputeObservation struct {
}

type RequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type RequestQueryEventQueryGroupByObservation struct {
}

type RequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []EventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type RequestQueryEventQueryGroupBySortObservation struct {
}

type RequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestQueryEventQueryObservation struct {
}

type RequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []QueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []RequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []QueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type RequestQueryEventQuerySearchObservation struct {
}

type RequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type RequestQueryMetricQueryObservation struct {
}

type RequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type RequestQueryObservation struct {
}

type RequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []QueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []QueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []QueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []QueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type RequestQueryProcessQueryObservation struct {
}

type RequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type RequestRumQueryComputeQueryObservation struct {
}

type RequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestRumQueryGroupByObservation struct {
}

type RequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestRumQueryGroupBySortQueryObservation struct {
}

type RequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestRumQueryMultiComputeObservation struct {
}

type RequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestRumQueryObservation struct {
}

type RequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestScatterplotTableFormulaObservation struct {
}

type RequestScatterplotTableFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Dimension of the Scatterplot. Valid values are `x`, `y`, `radius`, `color`.
	// +kubebuilder:validation:Required
	Dimension *string `json:"dimension" tf:"dimension,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`
}

type RequestScatterplotTableObservation struct {
}

type RequestScatterplotTableParameters struct {

	// +kubebuilder:validation:Optional
	Formula []RequestScatterplotTableFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// +kubebuilder:validation:Optional
	Query []RequestScatterplotTableQueryParameters `json:"query,omitempty" tf:"query,omitempty"`
}

type RequestScatterplotTableQueryApmDependencyStatsQueryObservation struct {
}

type RequestScatterplotTableQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type RequestScatterplotTableQueryApmResourceStatsQueryObservation struct {
}

type RequestScatterplotTableQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type RequestScatterplotTableQueryEventQueryComputeObservation struct {
}

type RequestScatterplotTableQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type RequestScatterplotTableQueryEventQueryGroupByObservation struct {
}

type RequestScatterplotTableQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []RequestScatterplotTableQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type RequestScatterplotTableQueryEventQueryGroupBySortObservation struct {
}

type RequestScatterplotTableQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type RequestScatterplotTableQueryEventQueryObservation struct {
}

type RequestScatterplotTableQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []RequestScatterplotTableQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []RequestScatterplotTableQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []RequestScatterplotTableQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type RequestScatterplotTableQueryEventQuerySearchObservation struct {
}

type RequestScatterplotTableQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type RequestScatterplotTableQueryMetricQueryObservation struct {
}

type RequestScatterplotTableQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type RequestScatterplotTableQueryObservation struct {
}

type RequestScatterplotTableQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []RequestScatterplotTableQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []RequestScatterplotTableQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []RequestScatterplotTableQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []RequestScatterplotTableQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestScatterplotTableQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type RequestScatterplotTableQueryProcessQueryObservation struct {
}

type RequestScatterplotTableQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type RequestSecurityQueryComputeQueryObservation struct {
}

type RequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSecurityQueryGroupByObservation struct {
}

type RequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSecurityQueryGroupBySortQueryObservation struct {
}

type RequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestSecurityQueryMultiComputeObservation struct {
}

type RequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSecurityQueryObservation struct {
}

type RequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSizeApmQueryComputeQueryObservation struct {
}

type RequestSizeApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeApmQueryGroupByObservation struct {
}

type RequestSizeApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestSizeApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSizeApmQueryGroupBySortQueryObservation struct {
}

type RequestSizeApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestSizeApmQueryMultiComputeObservation struct {
}

type RequestSizeApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeApmQueryObservation struct {
}

type RequestSizeApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestSizeApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestSizeApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestSizeApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSizeLogQueryComputeQueryObservation struct {
}

type RequestSizeLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeLogQueryGroupByObservation struct {
}

type RequestSizeLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestSizeLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSizeLogQueryGroupBySortQueryObservation struct {
}

type RequestSizeLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestSizeLogQueryMultiComputeObservation struct {
}

type RequestSizeLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeLogQueryObservation struct {
}

type RequestSizeLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestSizeLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestSizeLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestSizeLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSizeObservation struct {
}

type RequestSizeParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []RequestSizeApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []RequestSizeLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestSizeProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []RequestSizeRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []RequestSizeSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type RequestSizeProcessQueryObservation struct {
}

type RequestSizeProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestSizeRumQueryComputeQueryObservation struct {
}

type RequestSizeRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeRumQueryGroupByObservation struct {
}

type RequestSizeRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestSizeRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSizeRumQueryGroupBySortQueryObservation struct {
}

type RequestSizeRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestSizeRumQueryMultiComputeObservation struct {
}

type RequestSizeRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeRumQueryObservation struct {
}

type RequestSizeRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestSizeRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestSizeRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestSizeRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestSizeSecurityQueryComputeQueryObservation struct {
}

type RequestSizeSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeSecurityQueryGroupByObservation struct {
}

type RequestSizeSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestSizeSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestSizeSecurityQueryGroupBySortQueryObservation struct {
}

type RequestSizeSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestSizeSecurityQueryMultiComputeObservation struct {
}

type RequestSizeSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestSizeSecurityQueryObservation struct {
}

type RequestSizeSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestSizeSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestSizeSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestSizeSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestStyleObservation struct {
}

type RequestStyleParameters struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type RequestXApmQueryComputeQueryObservation struct {
}

type RequestXApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXApmQueryGroupByObservation struct {
}

type RequestXApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestXApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestXApmQueryGroupBySortQueryObservation struct {
}

type RequestXApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestXApmQueryMultiComputeObservation struct {
}

type RequestXApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXApmQueryObservation struct {
}

type RequestXApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestXApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestXApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestXApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestXLogQueryComputeQueryObservation struct {
}

type RequestXLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXLogQueryGroupByObservation struct {
}

type RequestXLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestXLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestXLogQueryGroupBySortQueryObservation struct {
}

type RequestXLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestXLogQueryMultiComputeObservation struct {
}

type RequestXLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXLogQueryObservation struct {
}

type RequestXLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestXLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestXLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestXLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestXObservation struct {
}

type RequestXParameters struct {

	// Aggregator used for the request. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []RequestXApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []RequestXLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestXProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []RequestXRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []RequestXSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type RequestXProcessQueryObservation struct {
}

type RequestXProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestXRumQueryComputeQueryObservation struct {
}

type RequestXRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXRumQueryGroupByObservation struct {
}

type RequestXRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestXRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestXRumQueryGroupBySortQueryObservation struct {
}

type RequestXRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestXRumQueryMultiComputeObservation struct {
}

type RequestXRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXRumQueryObservation struct {
}

type RequestXRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestXRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestXRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestXRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestXSecurityQueryComputeQueryObservation struct {
}

type RequestXSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXSecurityQueryGroupByObservation struct {
}

type RequestXSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestXSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestXSecurityQueryGroupBySortQueryObservation struct {
}

type RequestXSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestXSecurityQueryMultiComputeObservation struct {
}

type RequestXSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestXSecurityQueryObservation struct {
}

type RequestXSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestXSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestXSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestXSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestYApmQueryComputeQueryObservation struct {
}

type RequestYApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYApmQueryGroupByObservation struct {
}

type RequestYApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestYApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestYApmQueryGroupBySortQueryObservation struct {
}

type RequestYApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestYApmQueryMultiComputeObservation struct {
}

type RequestYApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYApmQueryObservation struct {
}

type RequestYApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestYApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestYApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestYApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestYLogQueryComputeQueryObservation struct {
}

type RequestYLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYLogQueryGroupByObservation struct {
}

type RequestYLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestYLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestYLogQueryGroupBySortQueryObservation struct {
}

type RequestYLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestYLogQueryMultiComputeObservation struct {
}

type RequestYLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYLogQueryObservation struct {
}

type RequestYLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestYLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestYLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestYLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestYObservation struct {
}

type RequestYParameters struct {

	// Aggregator used for the request. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []RequestYApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []RequestYLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []RequestYProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []RequestYRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []RequestYSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type RequestYProcessQueryObservation struct {
}

type RequestYProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type RequestYRumQueryComputeQueryObservation struct {
}

type RequestYRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYRumQueryGroupByObservation struct {
}

type RequestYRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestYRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestYRumQueryGroupBySortQueryObservation struct {
}

type RequestYRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestYRumQueryMultiComputeObservation struct {
}

type RequestYRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYRumQueryObservation struct {
}

type RequestYRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestYRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestYRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestYRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RequestYSecurityQueryComputeQueryObservation struct {
}

type RequestYSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYSecurityQueryGroupByObservation struct {
}

type RequestYSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RequestYSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RequestYSecurityQueryGroupBySortQueryObservation struct {
}

type RequestYSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RequestYSecurityQueryMultiComputeObservation struct {
}

type RequestYSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RequestYSecurityQueryObservation struct {
}

type RequestYSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RequestYSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RequestYSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RequestYSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type RightYaxisObservation struct {
}

type RightYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type RumQueryComputeQueryObservation struct {
}

type RumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RumQueryGroupByObservation struct {
}

type RumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []RumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type RumQueryGroupBySortQueryObservation struct {
}

type RumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type RumQueryMultiComputeObservation struct {
}

type RumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RumQueryObservation struct {
}

type RumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []RumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []RumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []RumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ScatterplotDefinitionCustomLinkObservation struct {
}

type ScatterplotDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type ScatterplotDefinitionObservation struct {
}

type ScatterplotDefinitionParameters struct {

	// List of groups used for colors.
	// +kubebuilder:validation:Optional
	ColorByGroups []*string `json:"colorByGroups,omitempty" tf:"color_by_groups,omitempty"`

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []ScatterplotDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Exactly one `request` block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Request []ScatterplotDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the X-Axis Controls. Exactly one nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Xaxis []XaxisParameters `json:"xaxis,omitempty" tf:"xaxis,omitempty"`

	// A nested block describing the Y-Axis Controls. Exactly one nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Yaxis []ScatterplotDefinitionYaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type ScatterplotDefinitionRequestObservation struct {
}

type ScatterplotDefinitionRequestParameters struct {

	// Scatterplot request containing formulas and functions.
	// +kubebuilder:validation:Optional
	ScatterplotTable []ScatterplotTableParameters `json:"scatterplotTable,omitempty" tf:"scatterplot_table,omitempty"`

	// The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
	// +kubebuilder:validation:Optional
	X []XParameters `json:"x,omitempty" tf:"x,omitempty"`

	// The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
	// +kubebuilder:validation:Optional
	Y []YParameters `json:"y,omitempty" tf:"y,omitempty"`
}

type ScatterplotDefinitionXaxisObservation struct {
}

type ScatterplotDefinitionXaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type ScatterplotDefinitionYaxisObservation struct {
}

type ScatterplotDefinitionYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type ScatterplotTableFormulaObservation struct {
}

type ScatterplotTableFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Dimension of the Scatterplot. Valid values are `x`, `y`, `radius`, `color`.
	// +kubebuilder:validation:Required
	Dimension *string `json:"dimension" tf:"dimension,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`
}

type ScatterplotTableObservation struct {
}

type ScatterplotTableParameters struct {

	// +kubebuilder:validation:Optional
	Formula []ScatterplotTableFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// +kubebuilder:validation:Optional
	Query []ScatterplotTableQueryParameters `json:"query,omitempty" tf:"query,omitempty"`
}

type ScatterplotTableQueryApmDependencyStatsQueryObservation struct {
}

type ScatterplotTableQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type ScatterplotTableQueryApmResourceStatsQueryObservation struct {
}

type ScatterplotTableQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type ScatterplotTableQueryEventQueryComputeObservation struct {
}

type ScatterplotTableQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type ScatterplotTableQueryEventQueryGroupByObservation struct {
}

type ScatterplotTableQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []ScatterplotTableQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type ScatterplotTableQueryEventQueryGroupBySortObservation struct {
}

type ScatterplotTableQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ScatterplotTableQueryEventQueryObservation struct {
}

type ScatterplotTableQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []ScatterplotTableQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []ScatterplotTableQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []ScatterplotTableQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type ScatterplotTableQueryEventQuerySearchObservation struct {
}

type ScatterplotTableQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type ScatterplotTableQueryMetricQueryObservation struct {
}

type ScatterplotTableQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type ScatterplotTableQueryObservation struct {
}

type ScatterplotTableQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []ScatterplotTableQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []ScatterplotTableQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []ScatterplotTableQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []ScatterplotTableQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []ScatterplotTableQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type ScatterplotTableQueryProcessQueryObservation struct {
}

type ScatterplotTableQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type SearchObservation struct {
}

type SearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type SecurityQueryComputeQueryObservation struct {
}

type SecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SecurityQueryGroupByObservation struct {
}

type SecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SecurityQueryGroupBySortQueryObservation struct {
}

type SecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SecurityQueryMultiComputeObservation struct {
}

type SecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SecurityQueryObservation struct {
}

type SecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ServiceLevelObjectiveDefinitionObservation struct {
}

type ServiceLevelObjectiveDefinitionParameters struct {

	// The global time target of the widget.
	// +kubebuilder:validation:Optional
	GlobalTimeTarget *string `json:"globalTimeTarget,omitempty" tf:"global_time_target,omitempty"`

	// The ID of the service level objective used by the widget.
	// +kubebuilder:validation:Required
	SLOID *string `json:"sloId" tf:"slo_id,omitempty"`

	// Whether to show the error budget or not.
	// +kubebuilder:validation:Optional
	ShowErrorBudget *bool `json:"showErrorBudget,omitempty" tf:"show_error_budget,omitempty"`

	// A list of time windows to display in the widget. Valid values are `7d`, `30d`, `90d`, `week_to_date`, `previous_week`, `month_to_date`, `previous_month`, `global_time`.
	// +kubebuilder:validation:Required
	TimeWindows []*string `json:"timeWindows" tf:"time_windows,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The view mode for the widget. Valid values are `overall`, `component`, `both`.
	// +kubebuilder:validation:Required
	ViewMode *string `json:"viewMode" tf:"view_mode,omitempty"`

	// The type of view to use when displaying the widget. Only `detail` is supported.
	// +kubebuilder:validation:Required
	ViewType *string `json:"viewType" tf:"view_type,omitempty"`
}

type ServicemapDefinitionCustomLinkObservation struct {
}

type ServicemapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type ServicemapDefinitionObservation struct {
}

type ServicemapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []ServicemapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Your environment and primary tag (or `*` if enabled for your account).
	// +kubebuilder:validation:Required
	Filters []*string `json:"filters" tf:"filters,omitempty"`

	// The ID of the service to map.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type SizeApmQueryComputeQueryObservation struct {
}

type SizeApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeApmQueryGroupByObservation struct {
}

type SizeApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SizeApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SizeApmQueryGroupBySortQueryObservation struct {
}

type SizeApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SizeApmQueryMultiComputeObservation struct {
}

type SizeApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeApmQueryObservation struct {
}

type SizeApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SizeApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SizeApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SizeApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SizeLogQueryComputeQueryObservation struct {
}

type SizeLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeLogQueryGroupByObservation struct {
}

type SizeLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SizeLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SizeLogQueryGroupBySortQueryObservation struct {
}

type SizeLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SizeLogQueryMultiComputeObservation struct {
}

type SizeLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeLogQueryObservation struct {
}

type SizeLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SizeLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SizeLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SizeLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SizeObservation struct {
}

type SizeParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []SizeApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []SizeLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []SizeProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []SizeRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []SizeSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type SizeProcessQueryObservation struct {
}

type SizeProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type SizeRumQueryComputeQueryObservation struct {
}

type SizeRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeRumQueryGroupByObservation struct {
}

type SizeRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SizeRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SizeRumQueryGroupBySortQueryObservation struct {
}

type SizeRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SizeRumQueryMultiComputeObservation struct {
}

type SizeRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeRumQueryObservation struct {
}

type SizeRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SizeRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SizeRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SizeRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SizeSecurityQueryComputeQueryObservation struct {
}

type SizeSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeSecurityQueryGroupByObservation struct {
}

type SizeSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SizeSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SizeSecurityQueryGroupBySortQueryObservation struct {
}

type SizeSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SizeSecurityQueryMultiComputeObservation struct {
}

type SizeSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SizeSecurityQueryObservation struct {
}

type SizeSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SizeSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SizeSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SizeSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SortObservation struct {
}

type SortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SortQueryObservation struct {
}

type SortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type StyleObservation struct {
}

type StyleParameters struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type SunburstDefinitionCustomLinkObservation struct {
}

type SunburstDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type SunburstDefinitionLegendInlineObservation struct {
}

type SunburstDefinitionLegendInlineParameters struct {

	// Whether to hide the percentages of the groups.
	// +kubebuilder:validation:Optional
	HidePercent *bool `json:"hidePercent,omitempty" tf:"hide_percent,omitempty"`

	// Whether to hide the values of the groups.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// The type of legend (inline or automatic). Valid values are `inline`, `automatic`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type SunburstDefinitionLegendTableObservation struct {
}

type SunburstDefinitionLegendTableParameters struct {

	// The type of legend (table or none). Valid values are `table`, `none`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type SunburstDefinitionObservation struct {
}

type SunburstDefinitionParameters struct {

	// Nested block describing a custom link. Multiple `custom_link` blocks are allowed with the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []SunburstDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Whether or not to show the total value in the widget.
	// +kubebuilder:validation:Optional
	HideTotal *bool `json:"hideTotal,omitempty" tf:"hide_total,omitempty"`

	// Used to configure the inline legend. Cannot be used in conjunction with legend_table.
	// +kubebuilder:validation:Optional
	LegendInline []LegendInlineParameters `json:"legendInline,omitempty" tf:"legend_inline,omitempty"`

	// Used to configure the table legend. Cannot be used in conjunction with legend_inline.
	// +kubebuilder:validation:Optional
	LegendTable []LegendTableParameters `json:"legendTable,omitempty" tf:"legend_table,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// Nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed with the structure below (exactly one of `q`, `log_query` or `rum_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []SunburstDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. One of `left`, `center`, or `right`. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title. Default is 16.
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type SunburstDefinitionRequestApmQueryComputeQueryObservation struct {
}

type SunburstDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestApmQueryGroupByObservation struct {
}

type SunburstDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SunburstDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type SunburstDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SunburstDefinitionRequestApmQueryMultiComputeObservation struct {
}

type SunburstDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestApmQueryObservation struct {
}

type SunburstDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SunburstDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SunburstDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestAuditQueryComputeQueryObservation struct {
}

type SunburstDefinitionRequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestAuditQueryGroupByObservation struct {
}

type SunburstDefinitionRequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SunburstDefinitionRequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestAuditQueryGroupBySortQueryObservation struct {
}

type SunburstDefinitionRequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SunburstDefinitionRequestAuditQueryMultiComputeObservation struct {
}

type SunburstDefinitionRequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestAuditQueryObservation struct {
}

type SunburstDefinitionRequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SunburstDefinitionRequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SunburstDefinitionRequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestFormulaConditionalFormatsObservation struct {
}

type SunburstDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type SunburstDefinitionRequestFormulaLimitObservation struct {
}

type SunburstDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SunburstDefinitionRequestFormulaObservation struct {
}

type SunburstDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []SunburstDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []SunburstDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type SunburstDefinitionRequestLogQueryComputeQueryObservation struct {
}

type SunburstDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestLogQueryGroupByObservation struct {
}

type SunburstDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SunburstDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type SunburstDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SunburstDefinitionRequestLogQueryMultiComputeObservation struct {
}

type SunburstDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestLogQueryObservation struct {
}

type SunburstDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SunburstDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SunburstDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryComputeQueryObservation struct {
}

type SunburstDefinitionRequestNetworkQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryGroupByObservation struct {
}

type SunburstDefinitionRequestNetworkQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SunburstDefinitionRequestNetworkQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryGroupBySortQueryObservation struct {
}

type SunburstDefinitionRequestNetworkQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryMultiComputeObservation struct {
}

type SunburstDefinitionRequestNetworkQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestNetworkQueryObservation struct {
}

type SunburstDefinitionRequestNetworkQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SunburstDefinitionRequestNetworkQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestNetworkQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SunburstDefinitionRequestNetworkQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestObservation struct {
}

type SunburstDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []SunburstDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []RequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []SunburstDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []SunburstDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	NetworkQuery []NetworkQueryParameters `json:"networkQuery,omitempty" tf:"network_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []SunburstDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []SunburstDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []SunburstDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []SunburstDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type SunburstDefinitionRequestProcessQueryObservation struct {
}

type SunburstDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type SunburstDefinitionRequestQueryApmDependencyStatsQueryObservation struct {
}

type SunburstDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type SunburstDefinitionRequestQueryApmResourceStatsQueryObservation struct {
}

type SunburstDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type SunburstDefinitionRequestQueryEventQueryComputeObservation struct {
}

type SunburstDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type SunburstDefinitionRequestQueryEventQueryGroupByObservation struct {
}

type SunburstDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []SunburstDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type SunburstDefinitionRequestQueryEventQueryGroupBySortObservation struct {
}

type SunburstDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type SunburstDefinitionRequestQueryEventQueryObservation struct {
}

type SunburstDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []SunburstDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []SunburstDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type SunburstDefinitionRequestQueryEventQuerySearchObservation struct {
}

type SunburstDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type SunburstDefinitionRequestQueryMetricQueryObservation struct {
}

type SunburstDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type SunburstDefinitionRequestQueryObservation struct {
}

type SunburstDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []SunburstDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []SunburstDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []SunburstDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []SunburstDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []SunburstDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type SunburstDefinitionRequestQueryProcessQueryObservation struct {
}

type SunburstDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type SunburstDefinitionRequestRumQueryComputeQueryObservation struct {
}

type SunburstDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestRumQueryGroupByObservation struct {
}

type SunburstDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SunburstDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type SunburstDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SunburstDefinitionRequestRumQueryMultiComputeObservation struct {
}

type SunburstDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestRumQueryObservation struct {
}

type SunburstDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SunburstDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SunburstDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type SunburstDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryGroupByObservation struct {
}

type SunburstDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []SunburstDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type SunburstDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type SunburstDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SunburstDefinitionRequestSecurityQueryObservation struct {
}

type SunburstDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []SunburstDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []SunburstDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []SunburstDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TemplateVariableObservation struct {
}

type TemplateVariableParameters struct {

	// The list of values that the template variable drop-down is be limited to
	// +kubebuilder:validation:Optional
	AvailableValues []*string `json:"availableValues,omitempty" tf:"available_values,omitempty"`

	// The default value for the template variable on dashboard load.
	// +kubebuilder:validation:Optional
	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	// The name of the variable.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The tag prefix associated with the variable. Only tags with this prefix appear in the variable dropdown.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type TemplateVariablePresetObservation struct {
}

type TemplateVariablePresetParameters struct {

	// The name of the preset.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The template variable names and assumed values under the given preset
	// +kubebuilder:validation:Optional
	TemplateVariable []TemplateVariablePresetTemplateVariableParameters `json:"templateVariable,omitempty" tf:"template_variable,omitempty"`
}

type TemplateVariablePresetTemplateVariableObservation struct {
}

type TemplateVariablePresetTemplateVariableParameters struct {

	// The name of the template variable
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value that should be assumed by the template variable in this preset
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TimeseriesDefinitionCustomLinkObservation struct {
}

type TimeseriesDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type TimeseriesDefinitionEventObservation struct {
}

type TimeseriesDefinitionEventParameters struct {

	// The event query to use in the widget.
	// +kubebuilder:validation:Required
	Q *string `json:"q" tf:"q,omitempty"`

	// The execution method for multi-value filters.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`
}

type TimeseriesDefinitionMarkerObservation struct {
}

type TimeseriesDefinitionMarkerParameters struct {

	// How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
	// +kubebuilder:validation:Optional
	DisplayType *string `json:"displayType,omitempty" tf:"display_type,omitempty"`

	// A label for the line or range.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// A mathematical expression describing the marker, for example: `y > 1`, `-5 < y < 0`, `y = 19`.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type TimeseriesDefinitionObservation struct {
}

type TimeseriesDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []TimeseriesDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Event []TimeseriesDefinitionEventParameters `json:"event,omitempty" tf:"event,omitempty"`

	// A list of columns to display in the legend. Valid values are `value`, `avg`, `sum`, `min`, `max`.
	// +kubebuilder:validation:Optional
	LegendColumns []*string `json:"legendColumns,omitempty" tf:"legend_columns,omitempty"`

	// The layout of the legend displayed in the widget. Valid values are `auto`, `horizontal`, `vertical`.
	// +kubebuilder:validation:Optional
	LegendLayout *string `json:"legendLayout,omitempty" tf:"legend_layout,omitempty"`

	// The size of the legend displayed in the widget.
	// +kubebuilder:validation:Optional
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple `marker` blocks are allowed within a given `tile_def` block.
	// +kubebuilder:validation:Optional
	Marker []MarkerParameters `json:"marker,omitempty" tf:"marker,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `network_query`, `security_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []TimeseriesDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// A nested block describing the right Y-Axis Controls. See the `on_right_yaxis` property for which request will use this axis. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	RightYaxis []RightYaxisParameters `json:"rightYaxis,omitempty" tf:"right_yaxis,omitempty"`

	// Whether or not to show the legend on this widget.
	// +kubebuilder:validation:Optional
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the Y-Axis Controls. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	Yaxis []TimeseriesDefinitionYaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryComputeQueryObservation struct {
}

type TimeseriesDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryGroupByObservation struct {
}

type TimeseriesDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []TimeseriesDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type TimeseriesDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryMultiComputeObservation struct {
}

type TimeseriesDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestApmQueryObservation struct {
}

type TimeseriesDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []TimeseriesDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []TimeseriesDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryComputeQueryObservation struct {
}

type TimeseriesDefinitionRequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryGroupByObservation struct {
}

type TimeseriesDefinitionRequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []TimeseriesDefinitionRequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryGroupBySortQueryObservation struct {
}

type TimeseriesDefinitionRequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryMultiComputeObservation struct {
}

type TimeseriesDefinitionRequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestAuditQueryObservation struct {
}

type TimeseriesDefinitionRequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []TimeseriesDefinitionRequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []TimeseriesDefinitionRequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestFormulaConditionalFormatsObservation struct {
}

type TimeseriesDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type TimeseriesDefinitionRequestFormulaLimitObservation struct {
}

type TimeseriesDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestFormulaObservation struct {
}

type TimeseriesDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []TimeseriesDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []TimeseriesDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryComputeQueryObservation struct {
}

type TimeseriesDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryGroupByObservation struct {
}

type TimeseriesDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []TimeseriesDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type TimeseriesDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryMultiComputeObservation struct {
}

type TimeseriesDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestLogQueryObservation struct {
}

type TimeseriesDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []TimeseriesDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []TimeseriesDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryComputeQueryObservation struct {
}

type TimeseriesDefinitionRequestNetworkQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryGroupByObservation struct {
}

type TimeseriesDefinitionRequestNetworkQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []TimeseriesDefinitionRequestNetworkQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryGroupBySortQueryObservation struct {
}

type TimeseriesDefinitionRequestNetworkQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryMultiComputeObservation struct {
}

type TimeseriesDefinitionRequestNetworkQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestNetworkQueryObservation struct {
}

type TimeseriesDefinitionRequestNetworkQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []TimeseriesDefinitionRequestNetworkQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestNetworkQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []TimeseriesDefinitionRequestNetworkQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestObservation struct {
}

type TimeseriesDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []TimeseriesDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []TimeseriesDefinitionRequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// How to display the marker lines. Valid values are `area`, `bars`, `line`.
	// +kubebuilder:validation:Optional
	DisplayType *string `json:"displayType,omitempty" tf:"display_type,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []TimeseriesDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []TimeseriesDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Metadata []MetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	NetworkQuery []RequestNetworkQueryParameters `json:"networkQuery,omitempty" tf:"network_query,omitempty"`

	// A Boolean indicating whether the request uses the right or left Y-Axis.
	// +kubebuilder:validation:Optional
	OnRightYaxis *bool `json:"onRightYaxis,omitempty" tf:"on_right_yaxis,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []TimeseriesDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []TimeseriesDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []TimeseriesDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []TimeseriesDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. Exactly one `style` block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []TimeseriesDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type TimeseriesDefinitionRequestProcessQueryObservation struct {
}

type TimeseriesDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type TimeseriesDefinitionRequestQueryApmDependencyStatsQueryObservation struct {
}

type TimeseriesDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type TimeseriesDefinitionRequestQueryApmResourceStatsQueryObservation struct {
}

type TimeseriesDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQueryComputeObservation struct {
}

type TimeseriesDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQueryGroupByObservation struct {
}

type TimeseriesDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []TimeseriesDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQueryGroupBySortObservation struct {
}

type TimeseriesDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQueryObservation struct {
}

type TimeseriesDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []TimeseriesDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []TimeseriesDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type TimeseriesDefinitionRequestQueryEventQuerySearchObservation struct {
}

type TimeseriesDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type TimeseriesDefinitionRequestQueryMetricQueryObservation struct {
}

type TimeseriesDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type TimeseriesDefinitionRequestQueryObservation struct {
}

type TimeseriesDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []TimeseriesDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []TimeseriesDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []TimeseriesDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []TimeseriesDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []TimeseriesDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type TimeseriesDefinitionRequestQueryProcessQueryObservation struct {
}

type TimeseriesDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryComputeQueryObservation struct {
}

type TimeseriesDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryGroupByObservation struct {
}

type TimeseriesDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []TimeseriesDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type TimeseriesDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryMultiComputeObservation struct {
}

type TimeseriesDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestRumQueryObservation struct {
}

type TimeseriesDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []TimeseriesDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []TimeseriesDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type TimeseriesDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryGroupByObservation struct {
}

type TimeseriesDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []TimeseriesDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type TimeseriesDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type TimeseriesDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TimeseriesDefinitionRequestSecurityQueryObservation struct {
}

type TimeseriesDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []TimeseriesDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []TimeseriesDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []TimeseriesDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type TimeseriesDefinitionRequestStyleObservation struct {
}

type TimeseriesDefinitionRequestStyleParameters struct {

	// The type of lines displayed. Valid values are `dashed`, `dotted`, `solid`.
	// +kubebuilder:validation:Optional
	LineType *string `json:"lineType,omitempty" tf:"line_type,omitempty"`

	// The width of line displayed. Valid values are `normal`, `thick`, `thin`.
	// +kubebuilder:validation:Optional
	LineWidth *string `json:"lineWidth,omitempty" tf:"line_width,omitempty"`

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type TimeseriesDefinitionRightYaxisObservation struct {
}

type TimeseriesDefinitionRightYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type TimeseriesDefinitionYaxisObservation struct {
}

type TimeseriesDefinitionYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type ToplistDefinitionCustomLinkObservation struct {
}

type ToplistDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type ToplistDefinitionObservation struct {
}

type ToplistDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []ToplistDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []ToplistDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ToplistDefinitionRequestApmQueryComputeQueryObservation struct {
}

type ToplistDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestApmQueryGroupByObservation struct {
}

type ToplistDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ToplistDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type ToplistDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ToplistDefinitionRequestApmQueryMultiComputeObservation struct {
}

type ToplistDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestApmQueryObservation struct {
}

type ToplistDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ToplistDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ToplistDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ToplistDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestAuditQueryComputeQueryObservation struct {
}

type ToplistDefinitionRequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestAuditQueryGroupByObservation struct {
}

type ToplistDefinitionRequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ToplistDefinitionRequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestAuditQueryGroupBySortQueryObservation struct {
}

type ToplistDefinitionRequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ToplistDefinitionRequestAuditQueryMultiComputeObservation struct {
}

type ToplistDefinitionRequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestAuditQueryObservation struct {
}

type ToplistDefinitionRequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ToplistDefinitionRequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ToplistDefinitionRequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ToplistDefinitionRequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestConditionalFormatsObservation struct {
}

type ToplistDefinitionRequestConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type ToplistDefinitionRequestFormulaConditionalFormatsObservation struct {
}

type ToplistDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type ToplistDefinitionRequestFormulaLimitObservation struct {
}

type ToplistDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ToplistDefinitionRequestFormulaObservation struct {
}

type ToplistDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []ToplistDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []ToplistDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type ToplistDefinitionRequestLogQueryComputeQueryObservation struct {
}

type ToplistDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestLogQueryGroupByObservation struct {
}

type ToplistDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ToplistDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type ToplistDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ToplistDefinitionRequestLogQueryMultiComputeObservation struct {
}

type ToplistDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestLogQueryObservation struct {
}

type ToplistDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ToplistDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ToplistDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ToplistDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestObservation struct {
}

type ToplistDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []ToplistDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []ToplistDefinitionRequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []ToplistDefinitionRequestConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []ToplistDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []ToplistDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []ToplistDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []ToplistDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []ToplistDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []ToplistDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// Define request for the widget's style.
	// +kubebuilder:validation:Optional
	Style []ToplistDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type ToplistDefinitionRequestProcessQueryObservation struct {
}

type ToplistDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type ToplistDefinitionRequestQueryApmDependencyStatsQueryObservation struct {
}

type ToplistDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type ToplistDefinitionRequestQueryApmResourceStatsQueryObservation struct {
}

type ToplistDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type ToplistDefinitionRequestQueryEventQueryComputeObservation struct {
}

type ToplistDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type ToplistDefinitionRequestQueryEventQueryGroupByObservation struct {
}

type ToplistDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []ToplistDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type ToplistDefinitionRequestQueryEventQueryGroupBySortObservation struct {
}

type ToplistDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type ToplistDefinitionRequestQueryEventQueryObservation struct {
}

type ToplistDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []ToplistDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []ToplistDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []ToplistDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type ToplistDefinitionRequestQueryEventQuerySearchObservation struct {
}

type ToplistDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type ToplistDefinitionRequestQueryMetricQueryObservation struct {
}

type ToplistDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type ToplistDefinitionRequestQueryObservation struct {
}

type ToplistDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []ToplistDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []ToplistDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []ToplistDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []ToplistDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []ToplistDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type ToplistDefinitionRequestQueryProcessQueryObservation struct {
}

type ToplistDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type ToplistDefinitionRequestRumQueryComputeQueryObservation struct {
}

type ToplistDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestRumQueryGroupByObservation struct {
}

type ToplistDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ToplistDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type ToplistDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ToplistDefinitionRequestRumQueryMultiComputeObservation struct {
}

type ToplistDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestRumQueryObservation struct {
}

type ToplistDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ToplistDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ToplistDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ToplistDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type ToplistDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryGroupByObservation struct {
}

type ToplistDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []ToplistDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type ToplistDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type ToplistDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ToplistDefinitionRequestSecurityQueryObservation struct {
}

type ToplistDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []ToplistDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []ToplistDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []ToplistDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type ToplistDefinitionRequestStyleObservation struct {
}

type ToplistDefinitionRequestStyleParameters struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type TraceServiceDefinitionObservation struct {
}

type TraceServiceDefinitionParameters struct {

	// The number of columns to display. Valid values are `one_column`, `two_column`, `three_column`.
	// +kubebuilder:validation:Optional
	DisplayFormat *string `json:"displayFormat,omitempty" tf:"display_format,omitempty"`

	// APM environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// Whether to show the latency breakdown or not.
	// +kubebuilder:validation:Optional
	ShowBreakdown *bool `json:"showBreakdown,omitempty" tf:"show_breakdown,omitempty"`

	// Whether to show the latency distribution or not.
	// +kubebuilder:validation:Optional
	ShowDistribution *bool `json:"showDistribution,omitempty" tf:"show_distribution,omitempty"`

	// Whether to show the error metrics or not.
	// +kubebuilder:validation:Optional
	ShowErrors *bool `json:"showErrors,omitempty" tf:"show_errors,omitempty"`

	// Whether to show the hits metrics or not
	// +kubebuilder:validation:Optional
	ShowHits *bool `json:"showHits,omitempty" tf:"show_hits,omitempty"`

	// Whether to show the latency metrics or not.
	// +kubebuilder:validation:Optional
	ShowLatency *bool `json:"showLatency,omitempty" tf:"show_latency,omitempty"`

	// Whether to show the resource list or not.
	// +kubebuilder:validation:Optional
	ShowResourceList *bool `json:"showResourceList,omitempty" tf:"show_resource_list,omitempty"`

	// The size of the widget. Valid values are `small`, `medium`, `large`.
	// +kubebuilder:validation:Optional
	SizeFormat *string `json:"sizeFormat,omitempty" tf:"size_format,omitempty"`

	// APM span name
	// +kubebuilder:validation:Required
	SpanName *string `json:"spanName" tf:"span_name,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type ViewObservation struct {
}

type ViewParameters struct {

	// The two-letter ISO code of a country to focus the map on (or `WORLD`).
	// +kubebuilder:validation:Required
	Focus *string `json:"focus" tf:"focus,omitempty"`
}

type WidgetAlertGraphDefinitionObservation struct {
}

type WidgetAlertGraphDefinitionParameters struct {

	// The ID of the monitor used by the widget.
	// +kubebuilder:validation:Required
	AlertID *string `json:"alertId" tf:"alert_id,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// Type of visualization to use when displaying the widget. Valid values are `timeseries`, `toplist`.
	// +kubebuilder:validation:Required
	VizType *string `json:"vizType" tf:"viz_type,omitempty"`
}

type WidgetAlertValueDefinitionObservation struct {
}

type WidgetAlertValueDefinitionParameters struct {

	// The ID of the monitor used by the widget.
	// +kubebuilder:validation:Required
	AlertID *string `json:"alertId" tf:"alert_id,omitempty"`

	// The precision to use when displaying the value. Use `*` for maximum precision.
	// +kubebuilder:validation:Optional
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The unit for the value displayed in the widget.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type WidgetChangeDefinitionObservation struct {
}

type WidgetChangeDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []ChangeDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Request []ChangeDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetCheckStatusDefinitionObservation struct {
}

type WidgetCheckStatusDefinitionParameters struct {

	// The check to use in the widget.
	// +kubebuilder:validation:Required
	Check *string `json:"check" tf:"check,omitempty"`

	// The check group to use in the widget.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// When `grouping = "cluster"`, indicates a list of tags to use for grouping.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The kind of grouping to use. Valid values are `check`, `cluster`.
	// +kubebuilder:validation:Required
	Grouping *string `json:"grouping" tf:"grouping,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A list of tags to use in the widget.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetDistributionDefinitionObservation struct {
}

type WidgetDistributionDefinitionParameters struct {

	// The size of the legend displayed in the widget.
	// +kubebuilder:validation:Optional
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Request []WidgetDistributionDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// Whether or not to show the legend on this widget.
	// +kubebuilder:validation:Optional
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetDistributionDefinitionRequestObservation struct {
}

type WidgetDistributionDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []DistributionDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []DistributionDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []DistributionDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []DistributionDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []DistributionDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []RequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetEventStreamDefinitionObservation struct {
}

type WidgetEventStreamDefinitionParameters struct {

	// The size to use to display an event. Valid values are `s`, `l`.
	// +kubebuilder:validation:Optional
	EventSize *string `json:"eventSize,omitempty" tf:"event_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// The execution method for multi-value filters, options: `and` or `or`.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetEventTimelineDefinitionObservation struct {
}

type WidgetEventTimelineDefinitionParameters struct {

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// The execution method for multi-value filters, options: `and` or `or`.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetFreeTextDefinitionObservation struct {
}

type WidgetFreeTextDefinitionParameters struct {

	// The color of the text in the widget.
	// +kubebuilder:validation:Optional
	Color *string `json:"color,omitempty" tf:"color,omitempty"`

	// The size of the text in the widget.
	// +kubebuilder:validation:Optional
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// The text to display in the widget.
	// +kubebuilder:validation:Required
	Text *string `json:"text" tf:"text,omitempty"`

	// The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`
}

type WidgetGeomapDefinitionCustomLinkObservation struct {
}

type WidgetGeomapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetGeomapDefinitionObservation struct {
}

type WidgetGeomapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetGeomapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `log_query` or `rum_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []WidgetGeomapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []WidgetGeomapDefinitionStyleParameters `json:"style,omitempty" tf:"style,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The view of the world that the map should render.
	// +kubebuilder:validation:Required
	View []GeomapDefinitionViewParameters `json:"view" tf:"view,omitempty"`
}

type WidgetGeomapDefinitionRequestLogQueryComputeQueryObservation struct {
}

type WidgetGeomapDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetGeomapDefinitionRequestLogQueryGroupByObservation struct {
}

type WidgetGeomapDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []GeomapDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetGeomapDefinitionRequestLogQueryMultiComputeObservation struct {
}

type WidgetGeomapDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetGeomapDefinitionRequestLogQueryObservation struct {
}

type WidgetGeomapDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetGeomapDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetGeomapDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetGeomapDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetGeomapDefinitionRequestObservation struct {
}

type WidgetGeomapDefinitionRequestParameters struct {

	// +kubebuilder:validation:Optional
	Formula []GeomapDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetGeomapDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []GeomapDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetGeomapDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryComputeQueryObservation struct {
}

type WidgetGeomapDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryGroupByObservation struct {
}

type WidgetGeomapDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetGeomapDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type WidgetGeomapDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryMultiComputeObservation struct {
}

type WidgetGeomapDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetGeomapDefinitionRequestRumQueryObservation struct {
}

type WidgetGeomapDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetGeomapDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetGeomapDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetGeomapDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetGeomapDefinitionStyleObservation struct {
}

type WidgetGeomapDefinitionStyleParameters struct {

	// The color palette to apply to the widget.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// A Boolean indicating whether to flip the palette tones.
	// +kubebuilder:validation:Required
	PaletteFlip *bool `json:"paletteFlip" tf:"palette_flip,omitempty"`
}

type WidgetHeatmapDefinitionCustomLinkObservation struct {
}

type WidgetHeatmapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetHeatmapDefinitionObservation struct {
}

type WidgetHeatmapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetHeatmapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Event []HeatmapDefinitionEventParameters `json:"event,omitempty" tf:"event,omitempty"`

	// The size of the legend displayed in the widget.
	// +kubebuilder:validation:Optional
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Request []WidgetHeatmapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// Whether or not to show the legend on this widget.
	// +kubebuilder:validation:Optional
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the Y-Axis Controls. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	Yaxis []HeatmapDefinitionYaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryComputeQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryGroupByObservation struct {
}

type WidgetHeatmapDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryMultiComputeObservation struct {
}

type WidgetHeatmapDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestApmQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetHeatmapDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetHeatmapDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetHeatmapDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryComputeQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryGroupByObservation struct {
}

type WidgetHeatmapDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryMultiComputeObservation struct {
}

type WidgetHeatmapDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestLogQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetHeatmapDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetHeatmapDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetHeatmapDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestObservation struct {
}

type WidgetHeatmapDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []WidgetHeatmapDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetHeatmapDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetHeatmapDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetHeatmapDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []WidgetHeatmapDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []WidgetHeatmapDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetHeatmapDefinitionRequestProcessQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryComputeQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryGroupByObservation struct {
}

type WidgetHeatmapDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryMultiComputeObservation struct {
}

type WidgetHeatmapDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestRumQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetHeatmapDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetHeatmapDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetHeatmapDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryGroupByObservation struct {
}

type WidgetHeatmapDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type WidgetHeatmapDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetHeatmapDefinitionRequestSecurityQueryObservation struct {
}

type WidgetHeatmapDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetHeatmapDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetHeatmapDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetHeatmapDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetHeatmapDefinitionRequestStyleObservation struct {
}

type WidgetHeatmapDefinitionRequestStyleParameters struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type WidgetHostmapDefinitionCustomLinkObservation struct {
}

type WidgetHostmapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetHostmapDefinitionObservation struct {
}

type WidgetHostmapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetHostmapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The list of tags to group nodes by.
	// +kubebuilder:validation:Optional
	Group []*string `json:"group,omitempty" tf:"group,omitempty"`

	// A Boolean indicating whether to show ungrouped nodes.
	// +kubebuilder:validation:Optional
	NoGroupHosts *bool `json:"noGroupHosts,omitempty" tf:"no_group_hosts,omitempty"`

	// A Boolean indicating whether to show nodes with no metrics.
	// +kubebuilder:validation:Optional
	NoMetricHosts *bool `json:"noMetricHosts,omitempty" tf:"no_metric_hosts,omitempty"`

	// The type of node used. Valid values are `host`, `container`.
	// +kubebuilder:validation:Optional
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Request []WidgetHostmapDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The list of tags to filter nodes by.
	// +kubebuilder:validation:Optional
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The style of the widget graph. One nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []WidgetHostmapDefinitionStyleParameters `json:"style,omitempty" tf:"style,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetHostmapDefinitionRequestObservation struct {
}

type WidgetHostmapDefinitionRequestParameters struct {

	// The query used to fill the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Fill []RequestFillParameters `json:"fill,omitempty" tf:"fill,omitempty"`

	// The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
	// +kubebuilder:validation:Optional
	Size []RequestSizeParameters `json:"size,omitempty" tf:"size,omitempty"`
}

type WidgetHostmapDefinitionStyleObservation struct {
}

type WidgetHostmapDefinitionStyleParameters struct {

	// The max value to use to color the map.
	// +kubebuilder:validation:Optional
	FillMax *string `json:"fillMax,omitempty" tf:"fill_max,omitempty"`

	// The min value to use to color the map.
	// +kubebuilder:validation:Optional
	FillMin *string `json:"fillMin,omitempty" tf:"fill_min,omitempty"`

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`

	// A Boolean indicating whether to flip the palette tones.
	// +kubebuilder:validation:Optional
	PaletteFlip *bool `json:"paletteFlip,omitempty" tf:"palette_flip,omitempty"`
}

type WidgetIframeDefinitionObservation struct {
}

type WidgetIframeDefinitionParameters struct {

	// The URL to use as a data source for the widget.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type WidgetImageDefinitionObservation struct {
}

type WidgetImageDefinitionParameters struct {

	// Whether to display a background or not.
	// +kubebuilder:validation:Optional
	HasBackground *bool `json:"hasBackground,omitempty" tf:"has_background,omitempty"`

	// Whether to display a border or not.
	// +kubebuilder:validation:Optional
	HasBorder *bool `json:"hasBorder,omitempty" tf:"has_border,omitempty"`

	// The horizontal alignment for the widget. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	HorizontalAlign *string `json:"horizontalAlign,omitempty" tf:"horizontal_align,omitempty"`

	// The margins to use around the image. Note: `small` and `large` values are deprecated. Valid values are `sm`, `md`, `lg`, `small`, `large`.
	// +kubebuilder:validation:Optional
	Margin *string `json:"margin,omitempty" tf:"margin,omitempty"`

	// The preferred method to adapt the dimensions of the image. The values are based on the image `object-fit` CSS properties. Note: `zoom`, `fit` and `center` values are deprecated. Valid values are `fill`, `contain`, `cover`, `none`, `scale-down`, `zoom`, `fit`, `center`.
	// +kubebuilder:validation:Optional
	Sizing *string `json:"sizing,omitempty" tf:"sizing,omitempty"`

	// The URL to use as a data source for the widget.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// The URL in dark mode to use as a data source for the widget.
	// +kubebuilder:validation:Optional
	URLDarkTheme *string `json:"urlDarkTheme,omitempty" tf:"url_dark_theme,omitempty"`

	// The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
	// +kubebuilder:validation:Optional
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`
}

type WidgetLayoutObservation struct {
}

type WidgetLayoutParameters struct {

	// The height of the widget.
	// +kubebuilder:validation:Required
	Height *float64 `json:"height" tf:"height,omitempty"`

	// Whether the widget should be the first one on the second column in high density or not. Only for the new dashboard layout and only one widget in the dashboard should have this property set to `true`.
	// +kubebuilder:validation:Optional
	IsColumnBreak *bool `json:"isColumnBreak,omitempty" tf:"is_column_break,omitempty"`

	// The width of the widget.
	// +kubebuilder:validation:Required
	Width *float64 `json:"width" tf:"width,omitempty"`

	// The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
	// +kubebuilder:validation:Required
	X *float64 `json:"x" tf:"x,omitempty"`

	// The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
	// +kubebuilder:validation:Required
	Y *float64 `json:"y" tf:"y,omitempty"`
}

type WidgetLogStreamDefinitionObservation struct {
}

type WidgetLogStreamDefinitionParameters struct {

	// Stringified list of columns to use, for example: `["column1","column2","column3"]`.
	// +kubebuilder:validation:Optional
	Columns []*string `json:"columns,omitempty" tf:"columns,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The number of log lines to display. Valid values are `inline`, `expanded-md`, `expanded-lg`.
	// +kubebuilder:validation:Optional
	MessageDisplay *string `json:"messageDisplay,omitempty" tf:"message_display,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// If the date column should be displayed.
	// +kubebuilder:validation:Optional
	ShowDateColumn *bool `json:"showDateColumn,omitempty" tf:"show_date_column,omitempty"`

	// If the message column should be displayed.
	// +kubebuilder:validation:Optional
	ShowMessageColumn *bool `json:"showMessageColumn,omitempty" tf:"show_message_column,omitempty"`

	// The facet and order to sort the data, for example: `{"column": "time", "order": "desc"}`.
	// +kubebuilder:validation:Optional
	Sort []WidgetLogStreamDefinitionSortParameters `json:"sort,omitempty" tf:"sort,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetLogStreamDefinitionSortObservation struct {
}

type WidgetLogStreamDefinitionSortParameters struct {

	// The facet path for the column
	// +kubebuilder:validation:Required
	Column *string `json:"column" tf:"column,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetManageStatusDefinitionObservation struct {
}

type WidgetManageStatusDefinitionParameters struct {

	// Whether to colorize text or background. Valid values are `background`, `text`.
	// +kubebuilder:validation:Optional
	ColorPreference *string `json:"colorPreference,omitempty" tf:"color_preference,omitempty"`

	// The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
	// +kubebuilder:validation:Optional
	DisplayFormat *string `json:"displayFormat,omitempty" tf:"display_format,omitempty"`

	// A Boolean indicating whether to hide empty categories.
	// +kubebuilder:validation:Optional
	HideZeroCounts *bool `json:"hideZeroCounts,omitempty" tf:"hide_zero_counts,omitempty"`

	// The query to use in the widget.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// A Boolean indicating whether to show when monitors/groups last triggered.
	// +kubebuilder:validation:Optional
	ShowLastTriggered *bool `json:"showLastTriggered,omitempty" tf:"show_last_triggered,omitempty"`

	// The method to sort the monitors. Valid values are `name`, `group`, `status`, `tags`, `triggered`, `group,asc`, `group,desc`, `name,asc`, `name,desc`, `status,asc`, `status,desc`, `tags,asc`, `tags,desc`, `triggered,asc`, `triggered,desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// The summary type to use. Valid values are `monitors`, `groups`, `combined`.
	// +kubebuilder:validation:Optional
	SummaryType *string `json:"summaryType,omitempty" tf:"summary_type,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetNoteDefinitionObservation struct {
}

type WidgetNoteDefinitionParameters struct {

	// The background color of the note.
	// +kubebuilder:validation:Optional
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// The content of the note.
	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// The size of the text.
	// +kubebuilder:validation:Optional
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// Whether to add padding or not.
	// +kubebuilder:validation:Optional
	HasPadding *bool `json:"hasPadding,omitempty" tf:"has_padding,omitempty"`

	// Whether to show a tick or not.
	// +kubebuilder:validation:Optional
	ShowTick *bool `json:"showTick,omitempty" tf:"show_tick,omitempty"`

	// The alignment of the widget's text. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// When `tick = true`, a string indicating on which side of the widget the tick should be displayed. Valid values are `bottom`, `left`, `right`, `top`.
	// +kubebuilder:validation:Optional
	TickEdge *string `json:"tickEdge,omitempty" tf:"tick_edge,omitempty"`

	// When `tick = true`, a string with a percent sign indicating the position of the tick, for example: `tick_pos = "50%"` is centered alignment.
	// +kubebuilder:validation:Optional
	TickPos *string `json:"tickPos,omitempty" tf:"tick_pos,omitempty"`

	// The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
	// +kubebuilder:validation:Optional
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`
}

type WidgetObservation struct {
	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`
}

type WidgetParameters struct {

	// The definition for a Alert Graph widget.
	// +kubebuilder:validation:Optional
	AlertGraphDefinition []AlertGraphDefinitionParameters `json:"alertGraphDefinition,omitempty" tf:"alert_graph_definition,omitempty"`

	// The definition for a Alert Value widget.
	// +kubebuilder:validation:Optional
	AlertValueDefinition []AlertValueDefinitionParameters `json:"alertValueDefinition,omitempty" tf:"alert_value_definition,omitempty"`

	// The definition for a Change widget.
	// +kubebuilder:validation:Optional
	ChangeDefinition []ChangeDefinitionParameters `json:"changeDefinition,omitempty" tf:"change_definition,omitempty"`

	// The definition for a Check Status widget.
	// +kubebuilder:validation:Optional
	CheckStatusDefinition []CheckStatusDefinitionParameters `json:"checkStatusDefinition,omitempty" tf:"check_status_definition,omitempty"`

	// The definition for a Distribution widget.
	// +kubebuilder:validation:Optional
	DistributionDefinition []DistributionDefinitionParameters `json:"distributionDefinition,omitempty" tf:"distribution_definition,omitempty"`

	// The definition for a Event Stream widget.
	// +kubebuilder:validation:Optional
	EventStreamDefinition []EventStreamDefinitionParameters `json:"eventStreamDefinition,omitempty" tf:"event_stream_definition,omitempty"`

	// The definition for a Event Timeline widget.
	// +kubebuilder:validation:Optional
	EventTimelineDefinition []EventTimelineDefinitionParameters `json:"eventTimelineDefinition,omitempty" tf:"event_timeline_definition,omitempty"`

	// The definition for a Free Text widget.
	// +kubebuilder:validation:Optional
	FreeTextDefinition []FreeTextDefinitionParameters `json:"freeTextDefinition,omitempty" tf:"free_text_definition,omitempty"`

	// The definition for a Geomap widget.
	// +kubebuilder:validation:Optional
	GeomapDefinition []GeomapDefinitionParameters `json:"geomapDefinition,omitempty" tf:"geomap_definition,omitempty"`

	// The definition for a Group widget.
	// +kubebuilder:validation:Optional
	GroupDefinition []GroupDefinitionParameters `json:"groupDefinition,omitempty" tf:"group_definition,omitempty"`

	// The definition for a Heatmap widget.
	// +kubebuilder:validation:Optional
	HeatmapDefinition []WidgetHeatmapDefinitionParameters `json:"heatmapDefinition,omitempty" tf:"heatmap_definition,omitempty"`

	// The definition for a Hostmap widget.
	// +kubebuilder:validation:Optional
	HostmapDefinition []WidgetHostmapDefinitionParameters `json:"hostmapDefinition,omitempty" tf:"hostmap_definition,omitempty"`

	// The definition for an Iframe widget.
	// +kubebuilder:validation:Optional
	IframeDefinition []WidgetIframeDefinitionParameters `json:"iframeDefinition,omitempty" tf:"iframe_definition,omitempty"`

	// The definition for an Image widget
	// +kubebuilder:validation:Optional
	ImageDefinition []WidgetImageDefinitionParameters `json:"imageDefinition,omitempty" tf:"image_definition,omitempty"`

	// The definition for an Log Stream widget.
	// +kubebuilder:validation:Optional
	LogStreamDefinition []WidgetLogStreamDefinitionParameters `json:"logStreamDefinition,omitempty" tf:"log_stream_definition,omitempty"`

	// The definition for an Manage Status widget.
	// +kubebuilder:validation:Optional
	ManageStatusDefinition []WidgetManageStatusDefinitionParameters `json:"manageStatusDefinition,omitempty" tf:"manage_status_definition,omitempty"`

	// The definition for a Note widget.
	// +kubebuilder:validation:Optional
	NoteDefinition []WidgetNoteDefinitionParameters `json:"noteDefinition,omitempty" tf:"note_definition,omitempty"`

	// The definition for a Query Table widget.
	// +kubebuilder:validation:Optional
	QueryTableDefinition []WidgetQueryTableDefinitionParameters `json:"queryTableDefinition,omitempty" tf:"query_table_definition,omitempty"`

	// The definition for a Query Value widget.
	// +kubebuilder:validation:Optional
	QueryValueDefinition []WidgetQueryValueDefinitionParameters `json:"queryValueDefinition,omitempty" tf:"query_value_definition,omitempty"`

	// The definition for a Scatterplot widget.
	// +kubebuilder:validation:Optional
	ScatterplotDefinition []WidgetScatterplotDefinitionParameters `json:"scatterplotDefinition,omitempty" tf:"scatterplot_definition,omitempty"`

	// The definition for a Service Level Objective widget.
	// +kubebuilder:validation:Optional
	ServiceLevelObjectiveDefinition []WidgetServiceLevelObjectiveDefinitionParameters `json:"serviceLevelObjectiveDefinition,omitempty" tf:"service_level_objective_definition,omitempty"`

	// The definition for a Service Map widget.
	// +kubebuilder:validation:Optional
	ServicemapDefinition []WidgetServicemapDefinitionParameters `json:"servicemapDefinition,omitempty" tf:"servicemap_definition,omitempty"`

	// The definition for a Sunburst widget.
	// +kubebuilder:validation:Optional
	SunburstDefinition []WidgetSunburstDefinitionParameters `json:"sunburstDefinition,omitempty" tf:"sunburst_definition,omitempty"`

	// The definition for a Timeseries widget.
	// +kubebuilder:validation:Optional
	TimeseriesDefinition []WidgetTimeseriesDefinitionParameters `json:"timeseriesDefinition,omitempty" tf:"timeseries_definition,omitempty"`

	// The definition for a Toplist widget.
	// +kubebuilder:validation:Optional
	ToplistDefinition []WidgetToplistDefinitionParameters `json:"toplistDefinition,omitempty" tf:"toplist_definition,omitempty"`

	// The definition for a Trace Service widget.
	// +kubebuilder:validation:Optional
	TraceServiceDefinition []WidgetTraceServiceDefinitionParameters `json:"traceServiceDefinition,omitempty" tf:"trace_service_definition,omitempty"`

	// The layout of the widget on a 'free' dashboard.
	// +kubebuilder:validation:Optional
	WidgetLayout []WidgetWidgetLayoutParameters `json:"widgetLayout,omitempty" tf:"widget_layout,omitempty"`
}

type WidgetQueryTableDefinitionCustomLinkObservation struct {
}

type WidgetQueryTableDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetQueryTableDefinitionObservation struct {
}

type WidgetQueryTableDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetQueryTableDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Controls the display of the search bar. Valid values are `always`, `never`, `auto`.
	// +kubebuilder:validation:Optional
	HasSearchBar *string `json:"hasSearchBar,omitempty" tf:"has_search_bar,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []WidgetQueryTableDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryComputeQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryGroupByObservation struct {
}

type WidgetQueryTableDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryMultiComputeObservation struct {
}

type WidgetQueryTableDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestApmQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryTableDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryTableDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryTableDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestFormulaConditionalFormatsObservation struct {
}

type WidgetQueryTableDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetQueryTableDefinitionRequestFormulaLimitObservation struct {
}

type WidgetQueryTableDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestFormulaObservation struct {
}

type WidgetQueryTableDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetQueryTableDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []WidgetQueryTableDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryComputeQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryGroupByObservation struct {
}

type WidgetQueryTableDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryMultiComputeObservation struct {
}

type WidgetQueryTableDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestLogQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryTableDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryTableDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryTableDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestObservation struct {
}

type WidgetQueryTableDefinitionRequestParameters struct {

	// The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The alias for the column name (defaults to metric name).
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []WidgetQueryTableDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// +kubebuilder:validation:Optional
	ApmStatsQuery []RequestApmStatsQueryParameters `json:"apmStatsQuery,omitempty" tf:"apm_stats_query,omitempty"`

	// A list of display modes for each table cell. List items one of `number`, `bar`. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode []*string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background, depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []QueryTableDefinitionRequestConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []WidgetQueryTableDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The number of lines to show in the table.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetQueryTableDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The sort order for the rows. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetQueryTableDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []WidgetQueryTableDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetQueryTableDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []WidgetQueryTableDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestProcessQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryEventQueryComputeObservation struct {
}

type WidgetQueryTableDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryEventQueryGroupByObservation struct {
}

type WidgetQueryTableDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []QueryTableDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryEventQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []WidgetQueryTableDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryTableDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []WidgetQueryTableDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryEventQuerySearchObservation struct {
}

type WidgetQueryTableDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryMetricQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []WidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []WidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []WidgetQueryTableDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []WidgetQueryTableDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetQueryTableDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestQueryProcessQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryComputeQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryGroupByObservation struct {
}

type WidgetQueryTableDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryMultiComputeObservation struct {
}

type WidgetQueryTableDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestRumQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryTableDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryTableDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryTableDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryGroupByObservation struct {
}

type WidgetQueryTableDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type WidgetQueryTableDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryTableDefinitionRequestSecurityQueryObservation struct {
}

type WidgetQueryTableDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryTableDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryTableDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryTableDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryValueDefinitionCustomLinkObservation struct {
}

type WidgetQueryValueDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetQueryValueDefinitionObservation struct {
}

type WidgetQueryValueDefinitionParameters struct {

	// A Boolean indicating whether to automatically scale the tile.
	// +kubebuilder:validation:Optional
	Autoscale *bool `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetQueryValueDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The unit for the value displayed in the widget.
	// +kubebuilder:validation:Optional
	CustomUnit *string `json:"customUnit,omitempty" tf:"custom_unit,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// The precision to use when displaying the tile.
	// +kubebuilder:validation:Optional
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []WidgetQueryValueDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The alignment of the widget's text. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TextAlign *string `json:"textAlign,omitempty" tf:"text_align,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryComputeQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryGroupByObservation struct {
}

type WidgetQueryValueDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryMultiComputeObservation struct {
}

type WidgetQueryValueDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestApmQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryValueDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryValueDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryValueDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestConditionalFormatsObservation struct {
}

type WidgetQueryValueDefinitionRequestConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetQueryValueDefinitionRequestFormulaConditionalFormatsObservation struct {
}

type WidgetQueryValueDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetQueryValueDefinitionRequestFormulaLimitObservation struct {
}

type WidgetQueryValueDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestFormulaObservation struct {
}

type WidgetQueryValueDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetQueryValueDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []WidgetQueryValueDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryComputeQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryGroupByObservation struct {
}

type WidgetQueryValueDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryMultiComputeObservation struct {
}

type WidgetQueryValueDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestLogQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryValueDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryValueDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryValueDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestObservation struct {
}

type WidgetQueryValueDefinitionRequestParameters struct {

	// The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []WidgetQueryValueDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []QueryValueDefinitionRequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetQueryValueDefinitionRequestConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []WidgetQueryValueDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetQueryValueDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetQueryValueDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []WidgetQueryValueDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetQueryValueDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []WidgetQueryValueDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestProcessQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQueryComputeObservation struct {
}

type WidgetQueryValueDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQueryGroupByObservation struct {
}

type WidgetQueryValueDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []WidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortObservation struct {
}

type WidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []WidgetQueryValueDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryValueDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []WidgetQueryValueDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryEventQuerySearchObservation struct {
}

type WidgetQueryValueDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryMetricQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []WidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []WidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []WidgetQueryValueDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []WidgetQueryValueDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetQueryValueDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestQueryProcessQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryComputeQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryGroupByObservation struct {
}

type WidgetQueryValueDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryMultiComputeObservation struct {
}

type WidgetQueryValueDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestRumQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryValueDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryValueDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryValueDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryGroupByObservation struct {
}

type WidgetQueryValueDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type WidgetQueryValueDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetQueryValueDefinitionRequestSecurityQueryObservation struct {
}

type WidgetQueryValueDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetQueryValueDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetQueryValueDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetQueryValueDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetScatterplotDefinitionCustomLinkObservation struct {
}

type WidgetScatterplotDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetScatterplotDefinitionObservation struct {
}

type WidgetScatterplotDefinitionParameters struct {

	// List of groups used for colors.
	// +kubebuilder:validation:Optional
	ColorByGroups []*string `json:"colorByGroups,omitempty" tf:"color_by_groups,omitempty"`

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetScatterplotDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Exactly one `request` block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Request []WidgetScatterplotDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the X-Axis Controls. Exactly one nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Xaxis []ScatterplotDefinitionXaxisParameters `json:"xaxis,omitempty" tf:"xaxis,omitempty"`

	// A nested block describing the Y-Axis Controls. Exactly one nested block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Yaxis []WidgetScatterplotDefinitionYaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type WidgetScatterplotDefinitionRequestObservation struct {
}

type WidgetScatterplotDefinitionRequestParameters struct {

	// Scatterplot request containing formulas and functions.
	// +kubebuilder:validation:Optional
	ScatterplotTable []RequestScatterplotTableParameters `json:"scatterplotTable,omitempty" tf:"scatterplot_table,omitempty"`

	// The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
	// +kubebuilder:validation:Optional
	X []RequestXParameters `json:"x,omitempty" tf:"x,omitempty"`

	// The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
	// +kubebuilder:validation:Optional
	Y []RequestYParameters `json:"y,omitempty" tf:"y,omitempty"`
}

type WidgetScatterplotDefinitionYaxisObservation struct {
}

type WidgetScatterplotDefinitionYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type WidgetServiceLevelObjectiveDefinitionObservation struct {
}

type WidgetServiceLevelObjectiveDefinitionParameters struct {

	// The global time target of the widget.
	// +kubebuilder:validation:Optional
	GlobalTimeTarget *string `json:"globalTimeTarget,omitempty" tf:"global_time_target,omitempty"`

	// The ID of the service level objective used by the widget.
	// +kubebuilder:validation:Required
	SLOID *string `json:"sloId" tf:"slo_id,omitempty"`

	// Whether to show the error budget or not.
	// +kubebuilder:validation:Optional
	ShowErrorBudget *bool `json:"showErrorBudget,omitempty" tf:"show_error_budget,omitempty"`

	// A list of time windows to display in the widget. Valid values are `7d`, `30d`, `90d`, `week_to_date`, `previous_week`, `month_to_date`, `previous_month`, `global_time`.
	// +kubebuilder:validation:Required
	TimeWindows []*string `json:"timeWindows" tf:"time_windows,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// The view mode for the widget. Valid values are `overall`, `component`, `both`.
	// +kubebuilder:validation:Required
	ViewMode *string `json:"viewMode" tf:"view_mode,omitempty"`

	// The type of view to use when displaying the widget. Only `detail` is supported.
	// +kubebuilder:validation:Required
	ViewType *string `json:"viewType" tf:"view_type,omitempty"`
}

type WidgetServicemapDefinitionCustomLinkObservation struct {
}

type WidgetServicemapDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetServicemapDefinitionObservation struct {
}

type WidgetServicemapDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetServicemapDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Your environment and primary tag (or `*` if enabled for your account).
	// +kubebuilder:validation:Required
	Filters []*string `json:"filters" tf:"filters,omitempty"`

	// The ID of the service to map.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetSunburstDefinitionCustomLinkObservation struct {
}

type WidgetSunburstDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetSunburstDefinitionObservation struct {
}

type WidgetSunburstDefinitionParameters struct {

	// Nested block describing a custom link. Multiple `custom_link` blocks are allowed with the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetSunburstDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// Whether or not to show the total value in the widget.
	// +kubebuilder:validation:Optional
	HideTotal *bool `json:"hideTotal,omitempty" tf:"hide_total,omitempty"`

	// Used to configure the inline legend. Cannot be used in conjunction with legend_table.
	// +kubebuilder:validation:Optional
	LegendInline []SunburstDefinitionLegendInlineParameters `json:"legendInline,omitempty" tf:"legend_inline,omitempty"`

	// Used to configure the table legend. Cannot be used in conjunction with legend_inline.
	// +kubebuilder:validation:Optional
	LegendTable []SunburstDefinitionLegendTableParameters `json:"legendTable,omitempty" tf:"legend_table,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// Nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed with the structure below (exactly one of `q`, `log_query` or `rum_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []WidgetSunburstDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. One of `left`, `center`, or `right`. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title. Default is 16.
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryComputeQueryObservation struct {
}

type WidgetSunburstDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryGroupByObservation struct {
}

type WidgetSunburstDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetSunburstDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type WidgetSunburstDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryMultiComputeObservation struct {
}

type WidgetSunburstDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestApmQueryObservation struct {
}

type WidgetSunburstDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetSunburstDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetSunburstDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetSunburstDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetSunburstDefinitionRequestFormulaConditionalFormatsObservation struct {
}

type WidgetSunburstDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetSunburstDefinitionRequestFormulaLimitObservation struct {
}

type WidgetSunburstDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestFormulaObservation struct {
}

type WidgetSunburstDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetSunburstDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []WidgetSunburstDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryComputeQueryObservation struct {
}

type WidgetSunburstDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryGroupByObservation struct {
}

type WidgetSunburstDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetSunburstDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type WidgetSunburstDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryMultiComputeObservation struct {
}

type WidgetSunburstDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestLogQueryObservation struct {
}

type WidgetSunburstDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetSunburstDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetSunburstDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetSunburstDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetSunburstDefinitionRequestObservation struct {
}

type WidgetSunburstDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []WidgetSunburstDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []SunburstDefinitionRequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []WidgetSunburstDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetSunburstDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	NetworkQuery []SunburstDefinitionRequestNetworkQueryParameters `json:"networkQuery,omitempty" tf:"network_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetSunburstDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []WidgetSunburstDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetSunburstDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []WidgetSunburstDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type WidgetSunburstDefinitionRequestProcessQueryObservation struct {
}

type WidgetSunburstDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryObservation struct {
}

type WidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryApmResourceStatsQueryObservation struct {
}

type WidgetSunburstDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQueryComputeObservation struct {
}

type WidgetSunburstDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQueryGroupByObservation struct {
}

type WidgetSunburstDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []WidgetSunburstDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQueryGroupBySortObservation struct {
}

type WidgetSunburstDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQueryObservation struct {
}

type WidgetSunburstDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []WidgetSunburstDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetSunburstDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []WidgetSunburstDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryEventQuerySearchObservation struct {
}

type WidgetSunburstDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryMetricQueryObservation struct {
}

type WidgetSunburstDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryObservation struct {
}

type WidgetSunburstDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []WidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []WidgetSunburstDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []WidgetSunburstDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []WidgetSunburstDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetSunburstDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetSunburstDefinitionRequestQueryProcessQueryObservation struct {
}

type WidgetSunburstDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryComputeQueryObservation struct {
}

type WidgetSunburstDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryGroupByObservation struct {
}

type WidgetSunburstDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetSunburstDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type WidgetSunburstDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryMultiComputeObservation struct {
}

type WidgetSunburstDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestRumQueryObservation struct {
}

type WidgetSunburstDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetSunburstDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetSunburstDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetSunburstDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type WidgetSunburstDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryGroupByObservation struct {
}

type WidgetSunburstDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type WidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type WidgetSunburstDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetSunburstDefinitionRequestSecurityQueryObservation struct {
}

type WidgetSunburstDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetSunburstDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetSunburstDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetSunburstDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionCustomLinkObservation struct {
}

type WidgetTimeseriesDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetTimeseriesDefinitionEventObservation struct {
}

type WidgetTimeseriesDefinitionEventParameters struct {

	// The event query to use in the widget.
	// +kubebuilder:validation:Required
	Q *string `json:"q" tf:"q,omitempty"`

	// The execution method for multi-value filters.
	// +kubebuilder:validation:Optional
	TagsExecution *string `json:"tagsExecution,omitempty" tf:"tags_execution,omitempty"`
}

type WidgetTimeseriesDefinitionObservation struct {
}

type WidgetTimeseriesDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetTimeseriesDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Event []WidgetTimeseriesDefinitionEventParameters `json:"event,omitempty" tf:"event,omitempty"`

	// A list of columns to display in the legend. Valid values are `value`, `avg`, `sum`, `min`, `max`.
	// +kubebuilder:validation:Optional
	LegendColumns []*string `json:"legendColumns,omitempty" tf:"legend_columns,omitempty"`

	// The layout of the legend displayed in the widget. Valid values are `auto`, `horizontal`, `vertical`.
	// +kubebuilder:validation:Optional
	LegendLayout *string `json:"legendLayout,omitempty" tf:"legend_layout,omitempty"`

	// The size of the legend displayed in the widget.
	// +kubebuilder:validation:Optional
	LegendSize *string `json:"legendSize,omitempty" tf:"legend_size,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple `marker` blocks are allowed within a given `tile_def` block.
	// +kubebuilder:validation:Optional
	Marker []TimeseriesDefinitionMarkerParameters `json:"marker,omitempty" tf:"marker,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `network_query`, `security_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []WidgetTimeseriesDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// A nested block describing the right Y-Axis Controls. See the `on_right_yaxis` property for which request will use this axis. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	RightYaxis []TimeseriesDefinitionRightYaxisParameters `json:"rightYaxis,omitempty" tf:"right_yaxis,omitempty"`

	// Whether or not to show the legend on this widget.
	// +kubebuilder:validation:Optional
	ShowLegend *bool `json:"showLegend,omitempty" tf:"show_legend,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`

	// A nested block describing the Y-Axis Controls. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	Yaxis []WidgetTimeseriesDefinitionYaxisParameters `json:"yaxis,omitempty" tf:"yaxis,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryComputeQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryGroupByObservation struct {
}

type WidgetTimeseriesDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryMultiComputeObservation struct {
}

type WidgetTimeseriesDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestApmQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetTimeseriesDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTimeseriesDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetTimeseriesDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryComputeQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryGroupByObservation struct {
}

type WidgetTimeseriesDefinitionRequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryMultiComputeObservation struct {
}

type WidgetTimeseriesDefinitionRequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestAuditQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetTimeseriesDefinitionRequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTimeseriesDefinitionRequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetTimeseriesDefinitionRequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestFormulaConditionalFormatsObservation struct {
}

type WidgetTimeseriesDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetTimeseriesDefinitionRequestFormulaLimitObservation struct {
}

type WidgetTimeseriesDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestFormulaObservation struct {
}

type WidgetTimeseriesDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetTimeseriesDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []WidgetTimeseriesDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryComputeQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryGroupByObservation struct {
}

type WidgetTimeseriesDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryMultiComputeObservation struct {
}

type WidgetTimeseriesDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestLogQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetTimeseriesDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTimeseriesDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetTimeseriesDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestObservation struct {
}

type WidgetTimeseriesDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []WidgetTimeseriesDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []WidgetTimeseriesDefinitionRequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// How to display the marker lines. Valid values are `area`, `bars`, `line`.
	// +kubebuilder:validation:Optional
	DisplayType *string `json:"displayType,omitempty" tf:"display_type,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []WidgetTimeseriesDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetTimeseriesDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	Metadata []RequestMetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	NetworkQuery []TimeseriesDefinitionRequestNetworkQueryParameters `json:"networkQuery,omitempty" tf:"network_query,omitempty"`

	// A Boolean indicating whether the request uses the right or left Y-Axis.
	// +kubebuilder:validation:Optional
	OnRightYaxis *bool `json:"onRightYaxis,omitempty" tf:"on_right_yaxis,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetTimeseriesDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []WidgetTimeseriesDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetTimeseriesDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []WidgetTimeseriesDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// The style of the widget graph. Exactly one `style` block is allowed using the structure below.
	// +kubebuilder:validation:Optional
	Style []WidgetTimeseriesDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetTimeseriesDefinitionRequestProcessQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryComputeObservation struct {
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryGroupByObservation struct {
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []WidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortObservation struct {
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []WidgetTimeseriesDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTimeseriesDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []WidgetTimeseriesDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryEventQuerySearchObservation struct {
}

type WidgetTimeseriesDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryMetricQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []WidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []WidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []WidgetTimeseriesDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []WidgetTimeseriesDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetTimeseriesDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestQueryProcessQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryComputeQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryGroupByObservation struct {
}

type WidgetTimeseriesDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryMultiComputeObservation struct {
}

type WidgetTimeseriesDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestRumQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetTimeseriesDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTimeseriesDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetTimeseriesDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryGroupByObservation struct {
}

type WidgetTimeseriesDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type WidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetTimeseriesDefinitionRequestSecurityQueryObservation struct {
}

type WidgetTimeseriesDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetTimeseriesDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetTimeseriesDefinitionRequestStyleObservation struct {
}

type WidgetTimeseriesDefinitionRequestStyleParameters struct {

	// The type of lines displayed. Valid values are `dashed`, `dotted`, `solid`.
	// +kubebuilder:validation:Optional
	LineType *string `json:"lineType,omitempty" tf:"line_type,omitempty"`

	// The width of line displayed. Valid values are `normal`, `thick`, `thin`.
	// +kubebuilder:validation:Optional
	LineWidth *string `json:"lineWidth,omitempty" tf:"line_width,omitempty"`

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type WidgetTimeseriesDefinitionYaxisObservation struct {
}

type WidgetTimeseriesDefinitionYaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type WidgetToplistDefinitionCustomLinkObservation struct {
}

type WidgetToplistDefinitionCustomLinkParameters struct {

	// The flag for toggling context menu link visibility.
	// +kubebuilder:validation:Optional
	IsHidden *bool `json:"isHidden,omitempty" tf:"is_hidden,omitempty"`

	// The label for the custom link URL.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The URL of the custom link.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// The label id that refers to a context menu link item. When override_label is provided, the client request omits the label field.
	// +kubebuilder:validation:Optional
	OverrideLabel *string `json:"overrideLabel,omitempty" tf:"override_label,omitempty"`
}

type WidgetToplistDefinitionObservation struct {
}

type WidgetToplistDefinitionParameters struct {

	// A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	CustomLink []WidgetToplistDefinitionCustomLinkParameters `json:"customLink,omitempty" tf:"custom_link,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// A nested block describing the request to use when displaying the widget. Multiple `request` blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the `request` block).
	// +kubebuilder:validation:Optional
	Request []WidgetToplistDefinitionRequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryComputeQueryObservation struct {
}

type WidgetToplistDefinitionRequestApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryGroupByObservation struct {
}

type WidgetToplistDefinitionRequestApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetToplistDefinitionRequestApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryGroupBySortQueryObservation struct {
}

type WidgetToplistDefinitionRequestApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryMultiComputeObservation struct {
}

type WidgetToplistDefinitionRequestApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestApmQueryObservation struct {
}

type WidgetToplistDefinitionRequestApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetToplistDefinitionRequestApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetToplistDefinitionRequestApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetToplistDefinitionRequestApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryComputeQueryObservation struct {
}

type WidgetToplistDefinitionRequestAuditQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryGroupByObservation struct {
}

type WidgetToplistDefinitionRequestAuditQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetToplistDefinitionRequestAuditQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryGroupBySortQueryObservation struct {
}

type WidgetToplistDefinitionRequestAuditQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryMultiComputeObservation struct {
}

type WidgetToplistDefinitionRequestAuditQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestAuditQueryObservation struct {
}

type WidgetToplistDefinitionRequestAuditQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetToplistDefinitionRequestAuditQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetToplistDefinitionRequestAuditQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetToplistDefinitionRequestAuditQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestConditionalFormatsObservation struct {
}

type WidgetToplistDefinitionRequestConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetToplistDefinitionRequestFormulaConditionalFormatsObservation struct {
}

type WidgetToplistDefinitionRequestFormulaConditionalFormatsParameters struct {

	// The comparator to use. Valid values are `>`, `>=`, `<`, `<=`.
	// +kubebuilder:validation:Required
	Comparator *string `json:"comparator" tf:"comparator,omitempty"`

	// The color palette to apply to the background, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomBgColor *string `json:"customBgColor,omitempty" tf:"custom_bg_color,omitempty"`

	// The color palette to apply to the foreground, same values available as palette.
	// +kubebuilder:validation:Optional
	CustomFgColor *string `json:"customFgColor,omitempty" tf:"custom_fg_color,omitempty"`

	// Setting this to True hides values.
	// +kubebuilder:validation:Optional
	HideValue *bool `json:"hideValue,omitempty" tf:"hide_value,omitempty"`

	// Displays an image as the background.
	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// The metric from the request to correlate with this conditional format.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
	// +kubebuilder:validation:Required
	Palette *string `json:"palette" tf:"palette,omitempty"`

	// Defines the displayed timeframe.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// A value for the comparator.
	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type WidgetToplistDefinitionRequestFormulaLimitObservation struct {
}

type WidgetToplistDefinitionRequestFormulaLimitParameters struct {

	// The number of results to return
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestFormulaObservation struct {
}

type WidgetToplistDefinitionRequestFormulaParameters struct {

	// An expression alias.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A list of display modes for each table cell. Valid values are `number`, `bar`.
	// +kubebuilder:validation:Optional
	CellDisplayMode *string `json:"cellDisplayMode,omitempty" tf:"cell_display_mode,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetToplistDefinitionRequestFormulaConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// A string expression built from queries, formulas, and functions.
	// +kubebuilder:validation:Required
	FormulaExpression *string `json:"formulaExpression" tf:"formula_expression,omitempty"`

	// The options for limiting results returned.
	// +kubebuilder:validation:Optional
	Limit []WidgetToplistDefinitionRequestFormulaLimitParameters `json:"limit,omitempty" tf:"limit,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryComputeQueryObservation struct {
}

type WidgetToplistDefinitionRequestLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryGroupByObservation struct {
}

type WidgetToplistDefinitionRequestLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetToplistDefinitionRequestLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryGroupBySortQueryObservation struct {
}

type WidgetToplistDefinitionRequestLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryMultiComputeObservation struct {
}

type WidgetToplistDefinitionRequestLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestLogQueryObservation struct {
}

type WidgetToplistDefinitionRequestLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetToplistDefinitionRequestLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetToplistDefinitionRequestLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetToplistDefinitionRequestLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestObservation struct {
}

type WidgetToplistDefinitionRequestParameters struct {

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []WidgetToplistDefinitionRequestApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	AuditQuery []WidgetToplistDefinitionRequestAuditQueryParameters `json:"auditQuery,omitempty" tf:"audit_query,omitempty"`

	// Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	ConditionalFormats []WidgetToplistDefinitionRequestConditionalFormatsParameters `json:"conditionalFormats,omitempty" tf:"conditional_formats,omitempty"`

	// +kubebuilder:validation:Optional
	Formula []WidgetToplistDefinitionRequestFormulaParameters `json:"formula,omitempty" tf:"formula,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []WidgetToplistDefinitionRequestLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetToplistDefinitionRequestProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// +kubebuilder:validation:Optional
	Query []WidgetToplistDefinitionRequestQueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []WidgetToplistDefinitionRequestRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []WidgetToplistDefinitionRequestSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`

	// Define request for the widget's style.
	// +kubebuilder:validation:Optional
	Style []WidgetToplistDefinitionRequestStyleParameters `json:"style,omitempty" tf:"style,omitempty"`
}

type WidgetToplistDefinitionRequestProcessQueryObservation struct {
}

type WidgetToplistDefinitionRequestProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type WidgetToplistDefinitionRequestQueryApmDependencyStatsQueryObservation struct {
}

type WidgetToplistDefinitionRequestQueryApmDependencyStatsQueryParameters struct {

	// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Determines whether stats for upstream or downstream dependencies should be queried.
	// +kubebuilder:validation:Optional
	IsUpstream *bool `json:"isUpstream,omitempty" tf:"is_upstream,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Required
	OperationName *string `json:"operationName" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetToplistDefinitionRequestQueryApmResourceStatsQueryObservation struct {
}

type WidgetToplistDefinitionRequestQueryApmResourceStatsQueryParameters struct {

	// The data source for APM Resource Stats queries. Valid values are `apm_resource_stats`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// APM Environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// Array of fields to group results by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of operation on service.
	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting_primary_tags_to_scope/#add-a-second-primary-tag-in-datadog.
	// +kubebuilder:validation:Optional
	PrimaryTagName *string `json:"primaryTagName,omitempty" tf:"primary_tag_name,omitempty"`

	// Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
	// +kubebuilder:validation:Optional
	PrimaryTagValue *string `json:"primaryTagValue,omitempty" tf:"primary_tag_value,omitempty"`

	// APM resource.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// APM statistic. Valid values are `errors`, `error_rate`, `hits`, `latency_avg`, `latency_max`, `latency_p50`, `latency_p75`, `latency_p90`, `latency_p95`, `latency_p99`.
	// +kubebuilder:validation:Required
	Stat *string `json:"stat" tf:"stat,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQueryComputeObservation struct {
}

type WidgetToplistDefinitionRequestQueryEventQueryComputeParameters struct {

	// The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// A time interval in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The measurable attribute to compute.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQueryGroupByObservation struct {
}

type WidgetToplistDefinitionRequestQueryEventQueryGroupByParameters struct {

	// The event facet.
	// +kubebuilder:validation:Required
	Facet *string `json:"facet" tf:"facet,omitempty"`

	// The number of groups to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The options for sorting group by results.
	// +kubebuilder:validation:Optional
	Sort []WidgetToplistDefinitionRequestQueryEventQueryGroupBySortParameters `json:"sort,omitempty" tf:"sort,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQueryGroupBySortObservation struct {
}

type WidgetToplistDefinitionRequestQueryEventQueryGroupBySortParameters struct {

	// The aggregation methods for the event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The metric used for sorting group by results.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// Direction of sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQueryObservation struct {
}

type WidgetToplistDefinitionRequestQueryEventQueryParameters struct {

	// The compute options.
	// +kubebuilder:validation:Required
	Compute []WidgetToplistDefinitionRequestQueryEventQueryComputeParameters `json:"compute" tf:"compute,omitempty"`

	// The data source for event platform-based queries. Valid values are `logs`, `spans`, `network`, `rum`, `security_signals`, `profiles`, `audit`, `events`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Group by options.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetToplistDefinitionRequestQueryEventQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// An array of index names to query in the stream.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The search options.
	// +kubebuilder:validation:Optional
	Search []WidgetToplistDefinitionRequestQueryEventQuerySearchParameters `json:"search,omitempty" tf:"search,omitempty"`
}

type WidgetToplistDefinitionRequestQueryEventQuerySearchObservation struct {
}

type WidgetToplistDefinitionRequestQueryEventQuerySearchParameters struct {

	// The events search string.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetToplistDefinitionRequestQueryMetricQueryObservation struct {
}

type WidgetToplistDefinitionRequestQueryMetricQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for metrics queries.
	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// The name of the query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metrics query definition.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type WidgetToplistDefinitionRequestQueryObservation struct {
}

type WidgetToplistDefinitionRequestQueryParameters struct {

	// The APM Dependency Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmDependencyStatsQuery []WidgetToplistDefinitionRequestQueryApmDependencyStatsQueryParameters `json:"apmDependencyStatsQuery,omitempty" tf:"apm_dependency_stats_query,omitempty"`

	// The APM Resource Stats query using formulas and functions.
	// +kubebuilder:validation:Optional
	ApmResourceStatsQuery []WidgetToplistDefinitionRequestQueryApmResourceStatsQueryParameters `json:"apmResourceStatsQuery,omitempty" tf:"apm_resource_stats_query,omitempty"`

	// A timeseries formula and functions events query.
	// +kubebuilder:validation:Optional
	EventQuery []WidgetToplistDefinitionRequestQueryEventQueryParameters `json:"eventQuery,omitempty" tf:"event_query,omitempty"`

	// A timeseries formula and functions metrics query.
	// +kubebuilder:validation:Optional
	MetricQuery []WidgetToplistDefinitionRequestQueryMetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query,omitempty"`

	// The process query using formulas and functions.
	// +kubebuilder:validation:Optional
	ProcessQuery []WidgetToplistDefinitionRequestQueryProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`
}

type WidgetToplistDefinitionRequestQueryProcessQueryObservation struct {
}

type WidgetToplistDefinitionRequestQueryProcessQueryParameters struct {

	// The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The data source for process queries. Valid values are `process`, `container`.
	// +kubebuilder:validation:Required
	DataSource *string `json:"dataSource" tf:"data_source,omitempty"`

	// Whether to normalize the CPU percentages.
	// +kubebuilder:validation:Optional
	IsNormalizedCPU *bool `json:"isNormalizedCpu,omitempty" tf:"is_normalized_cpu,omitempty"`

	// The number of hits to return.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The process metric name.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// The name of query for use in formulas.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The direction of the sort. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Optional
	Sort *string `json:"sort,omitempty" tf:"sort,omitempty"`

	// An array of tags to filter by.
	// +kubebuilder:validation:Optional
	TagFilters []*string `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// The text to use as a filter.
	// +kubebuilder:validation:Optional
	TextFilter *string `json:"textFilter,omitempty" tf:"text_filter,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryComputeQueryObservation struct {
}

type WidgetToplistDefinitionRequestRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryGroupByObservation struct {
}

type WidgetToplistDefinitionRequestRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetToplistDefinitionRequestRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryGroupBySortQueryObservation struct {
}

type WidgetToplistDefinitionRequestRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryMultiComputeObservation struct {
}

type WidgetToplistDefinitionRequestRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestRumQueryObservation struct {
}

type WidgetToplistDefinitionRequestRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetToplistDefinitionRequestRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetToplistDefinitionRequestRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetToplistDefinitionRequestRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryComputeQueryObservation struct {
}

type WidgetToplistDefinitionRequestSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryGroupByObservation struct {
}

type WidgetToplistDefinitionRequestSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []WidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryObservation struct {
}

type WidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryMultiComputeObservation struct {
}

type WidgetToplistDefinitionRequestSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type WidgetToplistDefinitionRequestSecurityQueryObservation struct {
}

type WidgetToplistDefinitionRequestSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []WidgetToplistDefinitionRequestSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []WidgetToplistDefinitionRequestSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []WidgetToplistDefinitionRequestSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type WidgetToplistDefinitionRequestStyleObservation struct {
}

type WidgetToplistDefinitionRequestStyleParameters struct {

	// A color palette to apply to the widget. The available options are available at: https://docs.datadoghq.com/dashboards/widgets/timeseries/#appearance.
	// +kubebuilder:validation:Optional
	Palette *string `json:"palette,omitempty" tf:"palette,omitempty"`
}

type WidgetTraceServiceDefinitionObservation struct {
}

type WidgetTraceServiceDefinitionParameters struct {

	// The number of columns to display. Valid values are `one_column`, `two_column`, `three_column`.
	// +kubebuilder:validation:Optional
	DisplayFormat *string `json:"displayFormat,omitempty" tf:"display_format,omitempty"`

	// APM environment.
	// +kubebuilder:validation:Required
	Env *string `json:"env" tf:"env,omitempty"`

	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// APM service.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// Whether to show the latency breakdown or not.
	// +kubebuilder:validation:Optional
	ShowBreakdown *bool `json:"showBreakdown,omitempty" tf:"show_breakdown,omitempty"`

	// Whether to show the latency distribution or not.
	// +kubebuilder:validation:Optional
	ShowDistribution *bool `json:"showDistribution,omitempty" tf:"show_distribution,omitempty"`

	// Whether to show the error metrics or not.
	// +kubebuilder:validation:Optional
	ShowErrors *bool `json:"showErrors,omitempty" tf:"show_errors,omitempty"`

	// Whether to show the hits metrics or not
	// +kubebuilder:validation:Optional
	ShowHits *bool `json:"showHits,omitempty" tf:"show_hits,omitempty"`

	// Whether to show the latency metrics or not.
	// +kubebuilder:validation:Optional
	ShowLatency *bool `json:"showLatency,omitempty" tf:"show_latency,omitempty"`

	// Whether to show the resource list or not.
	// +kubebuilder:validation:Optional
	ShowResourceList *bool `json:"showResourceList,omitempty" tf:"show_resource_list,omitempty"`

	// The size of the widget. Valid values are `small`, `medium`, `large`.
	// +kubebuilder:validation:Optional
	SizeFormat *string `json:"sizeFormat,omitempty" tf:"size_format,omitempty"`

	// APM span name
	// +kubebuilder:validation:Required
	SpanName *string `json:"spanName" tf:"span_name,omitempty"`

	// The title of the widget.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The alignment of the widget's title. Valid values are `center`, `left`, `right`.
	// +kubebuilder:validation:Optional
	TitleAlign *string `json:"titleAlign,omitempty" tf:"title_align,omitempty"`

	// The size of the widget's title (defaults to 16).
	// +kubebuilder:validation:Optional
	TitleSize *string `json:"titleSize,omitempty" tf:"title_size,omitempty"`
}

type WidgetWidgetLayoutObservation struct {
}

type WidgetWidgetLayoutParameters struct {

	// The height of the widget.
	// +kubebuilder:validation:Required
	Height *float64 `json:"height" tf:"height,omitempty"`

	// Whether the widget should be the first one on the second column in high density or not. Only for the new dashboard layout and only one widget in the dashboard should have this property set to `true`.
	// +kubebuilder:validation:Optional
	IsColumnBreak *bool `json:"isColumnBreak,omitempty" tf:"is_column_break,omitempty"`

	// The width of the widget.
	// +kubebuilder:validation:Required
	Width *float64 `json:"width" tf:"width,omitempty"`

	// The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
	// +kubebuilder:validation:Required
	X *float64 `json:"x" tf:"x,omitempty"`

	// The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
	// +kubebuilder:validation:Required
	Y *float64 `json:"y" tf:"y,omitempty"`
}

type XApmQueryComputeQueryObservation struct {
}

type XApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XApmQueryGroupByObservation struct {
}

type XApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []XApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type XApmQueryGroupBySortQueryObservation struct {
}

type XApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type XApmQueryMultiComputeObservation struct {
}

type XApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XApmQueryObservation struct {
}

type XApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []XApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []XApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []XApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type XLogQueryComputeQueryObservation struct {
}

type XLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XLogQueryGroupByObservation struct {
}

type XLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []XLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type XLogQueryGroupBySortQueryObservation struct {
}

type XLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type XLogQueryMultiComputeObservation struct {
}

type XLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XLogQueryObservation struct {
}

type XLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []XLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []XLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []XLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type XObservation struct {
}

type XParameters struct {

	// Aggregator used for the request. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []XApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []XLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []XProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []XRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []XSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type XProcessQueryObservation struct {
}

type XProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type XRumQueryComputeQueryObservation struct {
}

type XRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XRumQueryGroupByObservation struct {
}

type XRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []XRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type XRumQueryGroupBySortQueryObservation struct {
}

type XRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type XRumQueryMultiComputeObservation struct {
}

type XRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XRumQueryObservation struct {
}

type XRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []XRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []XRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []XRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type XSecurityQueryComputeQueryObservation struct {
}

type XSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XSecurityQueryGroupByObservation struct {
}

type XSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []XSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type XSecurityQueryGroupBySortQueryObservation struct {
}

type XSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type XSecurityQueryMultiComputeObservation struct {
}

type XSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type XSecurityQueryObservation struct {
}

type XSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []XSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []XSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []XSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type XaxisObservation struct {
}

type XaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

type YApmQueryComputeQueryObservation struct {
}

type YApmQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YApmQueryGroupByObservation struct {
}

type YApmQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []YApmQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type YApmQueryGroupBySortQueryObservation struct {
}

type YApmQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type YApmQueryMultiComputeObservation struct {
}

type YApmQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YApmQueryObservation struct {
}

type YApmQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []YApmQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []YApmQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []YApmQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type YLogQueryComputeQueryObservation struct {
}

type YLogQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YLogQueryGroupByObservation struct {
}

type YLogQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []YLogQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type YLogQueryGroupBySortQueryObservation struct {
}

type YLogQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type YLogQueryMultiComputeObservation struct {
}

type YLogQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YLogQueryObservation struct {
}

type YLogQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []YLogQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []YLogQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []YLogQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type YObservation struct {
}

type YParameters struct {

	// Aggregator used for the request. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
	// +kubebuilder:validation:Optional
	Aggregator *string `json:"aggregator,omitempty" tf:"aggregator,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	ApmQuery []YApmQueryParameters `json:"apmQuery,omitempty" tf:"apm_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	LogQuery []YLogQueryParameters `json:"logQuery,omitempty" tf:"log_query,omitempty"`

	// The process query to use in the widget. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	ProcessQuery []YProcessQueryParameters `json:"processQuery,omitempty" tf:"process_query,omitempty"`

	// The metric query to use for this widget.
	// +kubebuilder:validation:Optional
	Q *string `json:"q,omitempty" tf:"q,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	RumQuery []YRumQueryParameters `json:"rumQuery,omitempty" tf:"rum_query,omitempty"`

	// The query to use for this widget.
	// +kubebuilder:validation:Optional
	SecurityQuery []YSecurityQueryParameters `json:"securityQuery,omitempty" tf:"security_query,omitempty"`
}

type YProcessQueryObservation struct {
}

type YProcessQueryParameters struct {

	// A list of processes.
	// +kubebuilder:validation:Optional
	FilterBy []*string `json:"filterBy,omitempty" tf:"filter_by,omitempty"`

	// The max number of items in the filter list.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// Your chosen metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Your chosen search term.
	// +kubebuilder:validation:Optional
	SearchBy *string `json:"searchBy,omitempty" tf:"search_by,omitempty"`
}

type YRumQueryComputeQueryObservation struct {
}

type YRumQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YRumQueryGroupByObservation struct {
}

type YRumQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []YRumQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type YRumQueryGroupBySortQueryObservation struct {
}

type YRumQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type YRumQueryMultiComputeObservation struct {
}

type YRumQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YRumQueryObservation struct {
}

type YRumQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []YRumQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []YRumQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []YRumQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type YSecurityQueryComputeQueryObservation struct {
}

type YSecurityQueryComputeQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YSecurityQueryGroupByObservation struct {
}

type YSecurityQueryGroupByParameters struct {

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// The maximum number of items in the group.
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// A list of exactly one element describing the sort query to use.
	// +kubebuilder:validation:Optional
	SortQuery []YSecurityQueryGroupBySortQueryParameters `json:"sortQuery,omitempty" tf:"sort_query,omitempty"`
}

type YSecurityQueryGroupBySortQueryObservation struct {
}

type YSecurityQueryGroupBySortQueryParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Widget sorting methods. Valid values are `asc`, `desc`.
	// +kubebuilder:validation:Required
	Order *string `json:"order" tf:"order,omitempty"`
}

type YSecurityQueryMultiComputeObservation struct {
}

type YSecurityQueryMultiComputeParameters struct {

	// The aggregation method.
	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// The facet name.
	// +kubebuilder:validation:Optional
	Facet *string `json:"facet,omitempty" tf:"facet,omitempty"`

	// Define the time interval in seconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type YSecurityQueryObservation struct {
}

type YSecurityQueryParameters struct {

	// `compute_query` or `multi_compute` is required. The map keys are listed below.
	// +kubebuilder:validation:Optional
	ComputeQuery []YSecurityQueryComputeQueryParameters `json:"computeQuery,omitempty" tf:"compute_query,omitempty"`

	// Multiple `group_by` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	GroupBy []YSecurityQueryGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The name of the index to query.
	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
	// +kubebuilder:validation:Optional
	MultiCompute []YSecurityQueryMultiComputeParameters `json:"multiCompute,omitempty" tf:"multi_compute,omitempty"`

	// The search query to use.
	// +kubebuilder:validation:Optional
	SearchQuery *string `json:"searchQuery,omitempty" tf:"search_query,omitempty"`
}

type YaxisObservation struct {
}

type YaxisParameters struct {

	// Always include zero or fit the axis to the data range.
	// +kubebuilder:validation:Optional
	IncludeZero *bool `json:"includeZero,omitempty" tf:"include_zero,omitempty"`

	// The label of the axis to display on the graph.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Specify the maximum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Max *string `json:"max,omitempty" tf:"max,omitempty"`

	// Specify the minimum value to show on the Y-axis.
	// +kubebuilder:validation:Optional
	Min *string `json:"min,omitempty" tf:"min,omitempty"`

	// Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
	// +kubebuilder:validation:Optional
	Scale *string `json:"scale,omitempty" tf:"scale,omitempty"`
}

// DashboardSpec defines the desired state of Dashboard
type DashboardSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DashboardParameters `json:"forProvider"`
}

// DashboardStatus defines the observed state of Dashboard.
type DashboardStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DashboardObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Dashboard is the Schema for the Dashboards API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type Dashboard struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DashboardSpec   `json:"spec"`
	Status            DashboardStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DashboardList contains a list of Dashboards
type DashboardList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Dashboard `json:"items"`
}

// Repository type metadata.
var (
	Dashboard_Kind             = "Dashboard"
	Dashboard_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Dashboard_Kind}.String()
	Dashboard_KindAPIVersion   = Dashboard_Kind + "." + CRDGroupVersion.String()
	Dashboard_GroupVersionKind = CRDGroupVersion.WithKind(Dashboard_Kind)
)

func init() {
	SchemeBuilder.Register(&Dashboard{}, &DashboardList{})
}
