/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsLogCollectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AwsLogCollectionParameters struct {

	// Your AWS Account ID without dashes. If your account is a GovCloud or China account, specify the `access_key_id` here.
	// +kubebuilder:validation:Required
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// A list of services to collect logs from. See the [api docs](https://docs.datadoghq.com/api/v1/aws-logs-integration/#get-list-of-aws-log-ready-services) for more details on which services are supported.
	// +kubebuilder:validation:Required
	Services []*string `json:"services" tf:"services,omitempty"`
}

// AwsLogCollectionSpec defines the desired state of AwsLogCollection
type AwsLogCollectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AwsLogCollectionParameters `json:"forProvider"`
}

// AwsLogCollectionStatus defines the observed state of AwsLogCollection.
type AwsLogCollectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AwsLogCollectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AwsLogCollection is the Schema for the AwsLogCollections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type AwsLogCollection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AwsLogCollectionSpec   `json:"spec"`
	Status            AwsLogCollectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AwsLogCollectionList contains a list of AwsLogCollections
type AwsLogCollectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AwsLogCollection `json:"items"`
}

// Repository type metadata.
var (
	AwsLogCollection_Kind             = "AwsLogCollection"
	AwsLogCollection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AwsLogCollection_Kind}.String()
	AwsLogCollection_KindAPIVersion   = AwsLogCollection_Kind + "." + CRDGroupVersion.String()
	AwsLogCollection_GroupVersionKind = CRDGroupVersion.WithKind(AwsLogCollection_Kind)
)

func init() {
	SchemeBuilder.Register(&AwsLogCollection{}, &AwsLogCollectionList{})
}
