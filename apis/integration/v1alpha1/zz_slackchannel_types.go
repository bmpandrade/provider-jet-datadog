/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DisplayObservation struct {
}

type DisplayParameters struct {

	// Show the main body of the alert event.
	// +kubebuilder:validation:Optional
	Message *bool `json:"message,omitempty" tf:"message,omitempty"`

	// Show the list of @-handles in the alert event.
	// +kubebuilder:validation:Optional
	Notified *bool `json:"notified,omitempty" tf:"notified,omitempty"`

	// Show the alert event's snapshot image.
	// +kubebuilder:validation:Optional
	Snapshot *bool `json:"snapshot,omitempty" tf:"snapshot,omitempty"`

	// Show the scopes on which the monitor alerted.
	// +kubebuilder:validation:Optional
	Tags *bool `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SlackChannelObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SlackChannelParameters struct {

	// Slack account name.
	// +kubebuilder:validation:Required
	AccountName *string `json:"accountName" tf:"account_name,omitempty"`

	// Slack channel name.
	// +kubebuilder:validation:Required
	ChannelName *string `json:"channelName" tf:"channel_name,omitempty"`

	// Configuration options for what is shown in an alert event message.
	// +kubebuilder:validation:Required
	Display []DisplayParameters `json:"display" tf:"display,omitempty"`
}

// SlackChannelSpec defines the desired state of SlackChannel
type SlackChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SlackChannelParameters `json:"forProvider"`
}

// SlackChannelStatus defines the observed state of SlackChannel.
type SlackChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SlackChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SlackChannel is the Schema for the SlackChannels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type SlackChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SlackChannelSpec   `json:"spec"`
	Status            SlackChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SlackChannelList contains a list of SlackChannels
type SlackChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SlackChannel `json:"items"`
}

// Repository type metadata.
var (
	SlackChannel_Kind             = "SlackChannel"
	SlackChannel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SlackChannel_Kind}.String()
	SlackChannel_KindAPIVersion   = SlackChannel_Kind + "." + CRDGroupVersion.String()
	SlackChannel_GroupVersionKind = CRDGroupVersion.WithKind(SlackChannel_Kind)
)

func init() {
	SchemeBuilder.Register(&SlackChannel{}, &SlackChannelList{})
}
