/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SAMLAutocreateUsersDomainsObservation struct {
}

type SAMLAutocreateUsersDomainsParameters struct {

	// List of domains where the SAML automated user creation is enabled.
	// +kubebuilder:validation:Optional
	Domains []*string `json:"domains,omitempty" tf:"domains,omitempty"`

	// Whether or not the automated user creation based on SAML domain is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type SAMLIdpInitiatedLoginObservation struct {
}

type SAMLIdpInitiatedLoginParameters struct {

	// Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type SAMLObservation struct {
}

type SAMLParameters struct {

	// Whether or not SAML is enabled for this organization.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type SAMLStrictModeObservation struct {
}

type SAMLStrictModeParameters struct {

	// Whether or not the SAML strict mode is enabled. If true, all users must log in with SAML.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type SettingsObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PublicID *string `json:"publicId,omitempty" tf:"public_id,omitempty"`
}

type SettingsParameters struct {

	// Organization settings
	// +kubebuilder:validation:Optional
	Settings []SettingsSettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type SettingsSettingsObservation struct {
	SAMLCanBeEnabled *bool `json:"samlCanBeEnabled,omitempty" tf:"saml_can_be_enabled,omitempty"`

	SAMLIdpEndpoint *string `json:"samlIdpEndpoint,omitempty" tf:"saml_idp_endpoint,omitempty"`

	SAMLIdpMetadataUploaded *bool `json:"samlIdpMetadataUploaded,omitempty" tf:"saml_idp_metadata_uploaded,omitempty"`

	SAMLLoginURL *string `json:"samlLoginUrl,omitempty" tf:"saml_login_url,omitempty"`
}

type SettingsSettingsParameters struct {

	// Whether or not the organization users can share widgets outside of Datadog.
	// +kubebuilder:validation:Optional
	PrivateWidgetShare *bool `json:"privateWidgetShare,omitempty" tf:"private_widget_share,omitempty"`

	// SAML properties
	// +kubebuilder:validation:Required
	SAML []SAMLParameters `json:"saml" tf:"saml,omitempty"`

	// The access role of the user. Options are `st` (standard user), `adm` (admin user), or `ro` (read-only user). Allowed enum values: `st`, `adm` , `ro`, `ERROR`
	// +kubebuilder:validation:Optional
	SAMLAutocreateAccessRole *string `json:"samlAutocreateAccessRole,omitempty" tf:"saml_autocreate_access_role,omitempty"`

	// List of domains where the SAML automated user creation is enabled.
	// +kubebuilder:validation:Required
	SAMLAutocreateUsersDomains []SAMLAutocreateUsersDomainsParameters `json:"samlAutocreateUsersDomains" tf:"saml_autocreate_users_domains,omitempty"`

	// Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
	// +kubebuilder:validation:Required
	SAMLIdpInitiatedLogin []SAMLIdpInitiatedLoginParameters `json:"samlIdpInitiatedLogin" tf:"saml_idp_initiated_login,omitempty"`

	// Whether or not the SAML strict mode is enabled. If true, all users must log in with SAML.
	// +kubebuilder:validation:Required
	SAMLStrictMode []SAMLStrictModeParameters `json:"samlStrictMode" tf:"saml_strict_mode,omitempty"`
}

// SettingsSpec defines the desired state of Settings
type SettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SettingsParameters `json:"forProvider"`
}

// SettingsStatus defines the observed state of Settings.
type SettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Settings is the Schema for the Settingss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type Settings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SettingsSpec   `json:"spec"`
	Status            SettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SettingsList contains a list of Settingss
type SettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Settings `json:"items"`
}

// Repository type metadata.
var (
	Settings_Kind             = "Settings"
	Settings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Settings_Kind}.String()
	Settings_KindAPIVersion   = Settings_Kind + "." + CRDGroupVersion.String()
	Settings_GroupVersionKind = CRDGroupVersion.WithKind(Settings_Kind)
)

func init() {
	SchemeBuilder.Register(&Settings{}, &SettingsList{})
}
