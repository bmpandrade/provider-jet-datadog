/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GlobalVariableObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GlobalVariableParameters struct {

	// Description of the global variable.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Id of the Synthetics test to use for a variable from test.
	// +kubebuilder:validation:Optional
	ParseTestID *string `json:"parseTestId,omitempty" tf:"parse_test_id,omitempty"`

	// ID of the Synthetics test to use a source of the global variable value.
	// +kubebuilder:validation:Optional
	ParseTestOptions []ParseTestOptionsParameters `json:"parseTestOptions,omitempty" tf:"parse_test_options,omitempty"`

	// A list of role identifiers to associate with the Synthetics global variable.
	// +kubebuilder:validation:Optional
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// If set to true, the value of the global variable is hidden. Defaults to `false`.
	// +kubebuilder:validation:Optional
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// A list of tags to associate with your synthetics global variable.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The value of the global variable.
	// +kubebuilder:validation:Required
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef" tf:"-"`
}

type ParseTestOptionsObservation struct {
}

type ParseTestOptionsParameters struct {

	// Required when type = `http_header`. Defines the header to use to extract the value
	// +kubebuilder:validation:Optional
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// +kubebuilder:validation:Required
	Parser []ParserParameters `json:"parser" tf:"parser,omitempty"`

	// Defines the source to use to extract the value. Valid values are `http_body`, `http_header`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type ParserObservation struct {
}

type ParserParameters struct {

	// Type of parser to extract the value. Valid values are `raw`, `json_path`, `regex`, `x_path`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Value for the parser to use, required for type `json_path` or `regex`.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// GlobalVariableSpec defines the desired state of GlobalVariable
type GlobalVariableSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GlobalVariableParameters `json:"forProvider"`
}

// GlobalVariableStatus defines the observed state of GlobalVariable.
type GlobalVariableStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GlobalVariableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalVariable is the Schema for the GlobalVariables API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type GlobalVariable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlobalVariableSpec   `json:"spec"`
	Status            GlobalVariableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalVariableList contains a list of GlobalVariables
type GlobalVariableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlobalVariable `json:"items"`
}

// Repository type metadata.
var (
	GlobalVariable_Kind             = "GlobalVariable"
	GlobalVariable_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GlobalVariable_Kind}.String()
	GlobalVariable_KindAPIVersion   = GlobalVariable_Kind + "." + CRDGroupVersion.String()
	GlobalVariable_GroupVersionKind = CRDGroupVersion.WithKind(GlobalVariable_Kind)
)

func init() {
	SchemeBuilder.Register(&GlobalVariable{}, &GlobalVariableList{})
}
