/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ArithmeticProcessorObservation struct {
}

type ArithmeticProcessorParameters struct {

	// Arithmetic operation between one or more log attributes.
	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// Boolean value to enable your pipeline.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// +kubebuilder:validation:Optional
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// Your pipeline name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the attribute that contains the result of the arithmetic operation.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

type AttributeRemapperObservation struct {
}

type AttributeRemapperParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Override the target element if already set.
	// +kubebuilder:validation:Optional
	OverrideOnConflict *bool `json:"overrideOnConflict,omitempty" tf:"override_on_conflict,omitempty"`

	// Remove or preserve the remapped source element.
	// +kubebuilder:validation:Optional
	PreserveSource *bool `json:"preserveSource,omitempty" tf:"preserve_source,omitempty"`

	// Defines where the sources are from (log `attribute` or `tag`).
	// +kubebuilder:validation:Required
	SourceType *string `json:"sourceType" tf:"source_type,omitempty"`

	// List of source attributes or tags.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// Final attribute or tag name to remap the sources.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
	// +kubebuilder:validation:Optional
	TargetFormat *string `json:"targetFormat,omitempty" tf:"target_format,omitempty"`

	// Defines if the target is a log `attribute` or `tag`.
	// +kubebuilder:validation:Required
	TargetType *string `json:"targetType" tf:"target_type,omitempty"`
}

type CategoryFilterObservation struct {
}

type CategoryFilterParameters struct {

	// Filter criteria of the category.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type CategoryObservation struct {
}

type CategoryParameters struct {

	// +kubebuilder:validation:Required
	Filter []CategoryFilterParameters `json:"filter" tf:"filter,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type CategoryProcessorCategoryFilterObservation struct {
}

type CategoryProcessorCategoryFilterParameters struct {

	// Filter criteria of the category.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type CategoryProcessorCategoryObservation struct {
}

type CategoryProcessorCategoryParameters struct {

	// +kubebuilder:validation:Required
	Filter []CategoryProcessorCategoryFilterParameters `json:"filter" tf:"filter,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type CategoryProcessorObservation struct {
}

type CategoryProcessorParameters struct {

	// List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
	// +kubebuilder:validation:Required
	Category []CategoryParameters `json:"category" tf:"category,omitempty"`

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the category
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the target attribute whose value is defined by the matching category.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

type CustomPipelineObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CustomPipelineParameters struct {

	// +kubebuilder:validation:Required
	Filter []FilterParameters `json:"filter" tf:"filter,omitempty"`

	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Processor []ProcessorParameters `json:"processor,omitempty" tf:"processor,omitempty"`
}

type DateRemapperObservation struct {
}

type DateRemapperParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type FilterObservation struct {
}

type FilterParameters struct {

	// Filter criteria of the category.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type GeoIPParserObservation struct {
}

type GeoIPParserParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// Name of the parent attribute that contains all the extracted details from the sources.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

type GrokObservation struct {
}

type GrokParameters struct {

	// Match rules for your grok parser.
	// +kubebuilder:validation:Required
	MatchRules *string `json:"matchRules" tf:"match_rules,omitempty"`

	// Support rules for your grok parser.
	// +kubebuilder:validation:Required
	SupportRules *string `json:"supportRules" tf:"support_rules,omitempty"`
}

type GrokParserGrokObservation struct {
}

type GrokParserGrokParameters struct {

	// Match rules for your grok parser.
	// +kubebuilder:validation:Required
	MatchRules *string `json:"matchRules" tf:"match_rules,omitempty"`

	// Support rules for your grok parser.
	// +kubebuilder:validation:Required
	SupportRules *string `json:"supportRules" tf:"support_rules,omitempty"`
}

type GrokParserObservation struct {
}

type GrokParserParameters struct {

	// +kubebuilder:validation:Required
	Grok []GrokParameters `json:"grok" tf:"grok,omitempty"`

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	// +kubebuilder:validation:Optional
	Samples []*string `json:"samples,omitempty" tf:"samples,omitempty"`

	// Name of the log attribute to parse.
	// +kubebuilder:validation:Required
	Source *string `json:"source" tf:"source,omitempty"`
}

type LookupProcessorObservation struct {
}

type LookupProcessorParameters struct {

	// Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	// +kubebuilder:validation:Optional
	DefaultLookup *string `json:"defaultLookup,omitempty" tf:"default_lookup,omitempty"`

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// List of entries of the lookup table using `key,value` format.
	// +kubebuilder:validation:Required
	LookupTable []*string `json:"lookupTable" tf:"lookup_table,omitempty"`

	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the source attribute used to do the lookup.
	// +kubebuilder:validation:Required
	Source *string `json:"source" tf:"source,omitempty"`

	// Name of the attribute that contains the result of the lookup.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

type MessageRemapperObservation struct {
}

type MessageRemapperParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type PipelineFilterObservation struct {
}

type PipelineFilterParameters struct {

	// Filter criteria of the category.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type PipelineObservation struct {
}

type PipelineParameters struct {

	// +kubebuilder:validation:Required
	Filter []PipelineFilterParameters `json:"filter" tf:"filter,omitempty"`

	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Processor []PipelineProcessorParameters `json:"processor,omitempty" tf:"processor,omitempty"`
}

type PipelineProcessorObservation struct {
}

type PipelineProcessorParameters struct {

	// Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
	// +kubebuilder:validation:Optional
	ArithmeticProcessor []ProcessorArithmeticProcessorParameters `json:"arithmeticProcessor,omitempty" tf:"arithmetic_processor,omitempty"`

	// Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
	// +kubebuilder:validation:Optional
	AttributeRemapper []ProcessorAttributeRemapperParameters `json:"attributeRemapper,omitempty" tf:"attribute_remapper,omitempty"`

	// Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
	// +kubebuilder:validation:Optional
	CategoryProcessor []ProcessorCategoryProcessorParameters `json:"categoryProcessor,omitempty" tf:"category_processor,omitempty"`

	// Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
	// +kubebuilder:validation:Optional
	DateRemapper []ProcessorDateRemapperParameters `json:"dateRemapper,omitempty" tf:"date_remapper,omitempty"`

	// Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
	// +kubebuilder:validation:Optional
	GeoIPParser []ProcessorGeoIPParserParameters `json:"geoIpParser,omitempty" tf:"geo_ip_parser,omitempty"`

	// Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
	// +kubebuilder:validation:Optional
	GrokParser []ProcessorGrokParserParameters `json:"grokParser,omitempty" tf:"grok_parser,omitempty"`

	// Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	// +kubebuilder:validation:Optional
	LookupProcessor []ProcessorLookupProcessorParameters `json:"lookupProcessor,omitempty" tf:"lookup_processor,omitempty"`

	// Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
	// +kubebuilder:validation:Optional
	MessageRemapper []ProcessorMessageRemapperParameters `json:"messageRemapper,omitempty" tf:"message_remapper,omitempty"`

	// Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
	// +kubebuilder:validation:Optional
	ServiceRemapper []ServiceRemapperParameters `json:"serviceRemapper,omitempty" tf:"service_remapper,omitempty"`

	// Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
	// +kubebuilder:validation:Optional
	StatusRemapper []StatusRemapperParameters `json:"statusRemapper,omitempty" tf:"status_remapper,omitempty"`

	// String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
	// +kubebuilder:validation:Optional
	StringBuilderProcessor []StringBuilderProcessorParameters `json:"stringBuilderProcessor,omitempty" tf:"string_builder_processor,omitempty"`

	// Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
	// +kubebuilder:validation:Optional
	TraceIDRemapper []TraceIDRemapperParameters `json:"traceIdRemapper,omitempty" tf:"trace_id_remapper,omitempty"`

	// URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
	// +kubebuilder:validation:Optional
	URLParser []URLParserParameters `json:"urlParser,omitempty" tf:"url_parser,omitempty"`

	// User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
	// +kubebuilder:validation:Optional
	UserAgentParser []UserAgentParserParameters `json:"userAgentParser,omitempty" tf:"user_agent_parser,omitempty"`
}

type ProcessorArithmeticProcessorObservation struct {
}

type ProcessorArithmeticProcessorParameters struct {

	// Arithmetic operation between one or more log attributes.
	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// Boolean value to enable your pipeline.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// +kubebuilder:validation:Optional
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// Your pipeline name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the attribute that contains the result of the arithmetic operation.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

type ProcessorAttributeRemapperObservation struct {
}

type ProcessorAttributeRemapperParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Override the target element if already set.
	// +kubebuilder:validation:Optional
	OverrideOnConflict *bool `json:"overrideOnConflict,omitempty" tf:"override_on_conflict,omitempty"`

	// Remove or preserve the remapped source element.
	// +kubebuilder:validation:Optional
	PreserveSource *bool `json:"preserveSource,omitempty" tf:"preserve_source,omitempty"`

	// Defines where the sources are from (log `attribute` or `tag`).
	// +kubebuilder:validation:Required
	SourceType *string `json:"sourceType" tf:"source_type,omitempty"`

	// List of source attributes or tags.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// Final attribute or tag name to remap the sources.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
	// +kubebuilder:validation:Optional
	TargetFormat *string `json:"targetFormat,omitempty" tf:"target_format,omitempty"`

	// Defines if the target is a log `attribute` or `tag`.
	// +kubebuilder:validation:Required
	TargetType *string `json:"targetType" tf:"target_type,omitempty"`
}

type ProcessorCategoryProcessorObservation struct {
}

type ProcessorCategoryProcessorParameters struct {

	// List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
	// +kubebuilder:validation:Required
	Category []CategoryProcessorCategoryParameters `json:"category" tf:"category,omitempty"`

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the category
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the target attribute whose value is defined by the matching category.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

type ProcessorDateRemapperObservation struct {
}

type ProcessorDateRemapperParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type ProcessorGeoIPParserObservation struct {
}

type ProcessorGeoIPParserParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// Name of the parent attribute that contains all the extracted details from the sources.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

type ProcessorGrokParserObservation struct {
}

type ProcessorGrokParserParameters struct {

	// +kubebuilder:validation:Required
	Grok []GrokParserGrokParameters `json:"grok" tf:"grok,omitempty"`

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	// +kubebuilder:validation:Optional
	Samples []*string `json:"samples,omitempty" tf:"samples,omitempty"`

	// Name of the log attribute to parse.
	// +kubebuilder:validation:Required
	Source *string `json:"source" tf:"source,omitempty"`
}

type ProcessorLookupProcessorObservation struct {
}

type ProcessorLookupProcessorParameters struct {

	// Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	// +kubebuilder:validation:Optional
	DefaultLookup *string `json:"defaultLookup,omitempty" tf:"default_lookup,omitempty"`

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// List of entries of the lookup table using `key,value` format.
	// +kubebuilder:validation:Required
	LookupTable []*string `json:"lookupTable" tf:"lookup_table,omitempty"`

	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the source attribute used to do the lookup.
	// +kubebuilder:validation:Required
	Source *string `json:"source" tf:"source,omitempty"`

	// Name of the attribute that contains the result of the lookup.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

type ProcessorMessageRemapperObservation struct {
}

type ProcessorMessageRemapperParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type ProcessorObservation struct {
}

type ProcessorParameters struct {

	// Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
	// +kubebuilder:validation:Optional
	ArithmeticProcessor []ArithmeticProcessorParameters `json:"arithmeticProcessor,omitempty" tf:"arithmetic_processor,omitempty"`

	// Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
	// +kubebuilder:validation:Optional
	AttributeRemapper []AttributeRemapperParameters `json:"attributeRemapper,omitempty" tf:"attribute_remapper,omitempty"`

	// Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
	// +kubebuilder:validation:Optional
	CategoryProcessor []CategoryProcessorParameters `json:"categoryProcessor,omitempty" tf:"category_processor,omitempty"`

	// Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
	// +kubebuilder:validation:Optional
	DateRemapper []DateRemapperParameters `json:"dateRemapper,omitempty" tf:"date_remapper,omitempty"`

	// Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
	// +kubebuilder:validation:Optional
	GeoIPParser []GeoIPParserParameters `json:"geoIpParser,omitempty" tf:"geo_ip_parser,omitempty"`

	// Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
	// +kubebuilder:validation:Optional
	GrokParser []GrokParserParameters `json:"grokParser,omitempty" tf:"grok_parser,omitempty"`

	// Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	// +kubebuilder:validation:Optional
	LookupProcessor []LookupProcessorParameters `json:"lookupProcessor,omitempty" tf:"lookup_processor,omitempty"`

	// Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
	// +kubebuilder:validation:Optional
	MessageRemapper []MessageRemapperParameters `json:"messageRemapper,omitempty" tf:"message_remapper,omitempty"`

	// +kubebuilder:validation:Optional
	Pipeline []PipelineParameters `json:"pipeline,omitempty" tf:"pipeline,omitempty"`

	// Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
	// +kubebuilder:validation:Optional
	ServiceRemapper []ProcessorServiceRemapperParameters `json:"serviceRemapper,omitempty" tf:"service_remapper,omitempty"`

	// Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
	// +kubebuilder:validation:Optional
	StatusRemapper []ProcessorStatusRemapperParameters `json:"statusRemapper,omitempty" tf:"status_remapper,omitempty"`

	// String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
	// +kubebuilder:validation:Optional
	StringBuilderProcessor []ProcessorStringBuilderProcessorParameters `json:"stringBuilderProcessor,omitempty" tf:"string_builder_processor,omitempty"`

	// Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
	// +kubebuilder:validation:Optional
	TraceIDRemapper []ProcessorTraceIDRemapperParameters `json:"traceIdRemapper,omitempty" tf:"trace_id_remapper,omitempty"`

	// URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
	// +kubebuilder:validation:Optional
	URLParser []ProcessorURLParserParameters `json:"urlParser,omitempty" tf:"url_parser,omitempty"`

	// User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
	// +kubebuilder:validation:Optional
	UserAgentParser []ProcessorUserAgentParserParameters `json:"userAgentParser,omitempty" tf:"user_agent_parser,omitempty"`
}

type ProcessorServiceRemapperObservation struct {
}

type ProcessorServiceRemapperParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type ProcessorStatusRemapperObservation struct {
}

type ProcessorStatusRemapperParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type ProcessorStringBuilderProcessorObservation struct {
}

type ProcessorStringBuilderProcessorParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// If it replaces all missing attributes of template by an empty string.
	// +kubebuilder:validation:Optional
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// The name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of the attribute that contains the result of the template.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// The formula with one or more attributes and raw text.
	// +kubebuilder:validation:Required
	Template *string `json:"template" tf:"template,omitempty"`
}

type ProcessorTraceIDRemapperObservation struct {
}

type ProcessorTraceIDRemapperParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type ProcessorURLParserObservation struct {
}

type ProcessorURLParserParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Normalize the ending slashes or not.
	// +kubebuilder:validation:Optional
	NormalizeEndingSlashes *bool `json:"normalizeEndingSlashes,omitempty" tf:"normalize_ending_slashes,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// Name of the parent attribute that contains all the extracted details from the sources.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

type ProcessorUserAgentParserObservation struct {
}

type ProcessorUserAgentParserParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// If the source attribute is URL encoded or not.
	// +kubebuilder:validation:Optional
	IsEncoded *bool `json:"isEncoded,omitempty" tf:"is_encoded,omitempty"`

	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// Name of the parent attribute that contains all the extracted details from the sources.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

type ServiceRemapperObservation struct {
}

type ServiceRemapperParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type StatusRemapperObservation struct {
}

type StatusRemapperParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type StringBuilderProcessorObservation struct {
}

type StringBuilderProcessorParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// If it replaces all missing attributes of template by an empty string.
	// +kubebuilder:validation:Optional
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// The name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of the attribute that contains the result of the template.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// The formula with one or more attributes and raw text.
	// +kubebuilder:validation:Required
	Template *string `json:"template" tf:"template,omitempty"`
}

type TraceIDRemapperObservation struct {
}

type TraceIDRemapperParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type URLParserObservation struct {
}

type URLParserParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Normalize the ending slashes or not.
	// +kubebuilder:validation:Optional
	NormalizeEndingSlashes *bool `json:"normalizeEndingSlashes,omitempty" tf:"normalize_ending_slashes,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// Name of the parent attribute that contains all the extracted details from the sources.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

type UserAgentParserObservation struct {
}

type UserAgentParserParameters struct {

	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// If the source attribute is URL encoded or not.
	// +kubebuilder:validation:Optional
	IsEncoded *bool `json:"isEncoded,omitempty" tf:"is_encoded,omitempty"`

	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of source attributes.
	// +kubebuilder:validation:Required
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// Name of the parent attribute that contains all the extracted details from the sources.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

// CustomPipelineSpec defines the desired state of CustomPipeline
type CustomPipelineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomPipelineParameters `json:"forProvider"`
}

// CustomPipelineStatus defines the observed state of CustomPipeline.
type CustomPipelineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomPipelineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CustomPipeline is the Schema for the CustomPipelines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type CustomPipeline struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CustomPipelineSpec   `json:"spec"`
	Status            CustomPipelineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomPipelineList contains a list of CustomPipelines
type CustomPipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomPipeline `json:"items"`
}

// Repository type metadata.
var (
	CustomPipeline_Kind             = "CustomPipeline"
	CustomPipeline_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomPipeline_Kind}.String()
	CustomPipeline_KindAPIVersion   = CustomPipeline_Kind + "." + CRDGroupVersion.String()
	CustomPipeline_GroupVersionKind = CRDGroupVersion.WithKind(CustomPipeline_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomPipeline{}, &CustomPipelineList{})
}
