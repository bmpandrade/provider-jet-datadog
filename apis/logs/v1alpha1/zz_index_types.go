/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExclusionFilterFilterObservation struct {
}

type ExclusionFilterFilterParameters struct {

	// Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// The fraction of logs excluded by the exclusion filter, when active.
	// +kubebuilder:validation:Optional
	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`
}

type ExclusionFilterObservation struct {
}

type ExclusionFilterParameters struct {

	// +kubebuilder:validation:Optional
	Filter []ExclusionFilterFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// A boolean stating if the exclusion is active or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// The name of the exclusion filter.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type IndexFilterObservation struct {
}

type IndexFilterParameters struct {

	// Logs filter criteria. Only logs matching this filter criteria are considered for this index.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type IndexObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IndexParameters struct {

	// The number of log events you can send in this index per day before you are rate-limited.
	// +kubebuilder:validation:Optional
	DailyLimit *float64 `json:"dailyLimit,omitempty" tf:"daily_limit,omitempty"`

	// If true, sets the daily_limit value to null and the index is not limited on a daily basis (any specified daily_limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained.
	// +kubebuilder:validation:Optional
	DisableDailyLimit *bool `json:"disableDailyLimit,omitempty" tf:"disable_daily_limit,omitempty"`

	// List of exclusion filters.
	// +kubebuilder:validation:Optional
	ExclusionFilter []ExclusionFilterParameters `json:"exclusionFilter,omitempty" tf:"exclusion_filter,omitempty"`

	// Logs filter
	// +kubebuilder:validation:Required
	Filter []IndexFilterParameters `json:"filter" tf:"filter,omitempty"`

	// The number of days before logs are deleted from this index.
	// +kubebuilder:validation:Optional
	RetentionDays *float64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`
}

// IndexSpec defines the desired state of Index
type IndexSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IndexParameters `json:"forProvider"`
}

// IndexStatus defines the observed state of Index.
type IndexStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IndexObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Index is the Schema for the Indexs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type Index struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IndexSpec   `json:"spec"`
	Status            IndexStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IndexList contains a list of Indexs
type IndexList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Index `json:"items"`
}

// Repository type metadata.
var (
	Index_Kind             = "Index"
	Index_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Index_Kind}.String()
	Index_KindAPIVersion   = Index_Kind + "." + CRDGroupVersion.String()
	Index_GroupVersionKind = CRDGroupVersion.WithKind(Index_Kind)
)

func init() {
	SchemeBuilder.Register(&Index{}, &IndexList{})
}
