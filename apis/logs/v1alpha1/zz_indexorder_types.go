/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IndexOrderObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IndexOrderParameters struct {

	// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	// +kubebuilder:validation:Required
	Indexes []*string `json:"indexes" tf:"indexes,omitempty"`
}

// IndexOrderSpec defines the desired state of IndexOrder
type IndexOrderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IndexOrderParameters `json:"forProvider"`
}

// IndexOrderStatus defines the observed state of IndexOrder.
type IndexOrderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IndexOrderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IndexOrder is the Schema for the IndexOrders API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type IndexOrder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IndexOrderSpec   `json:"spec"`
	Status            IndexOrderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IndexOrderList contains a list of IndexOrders
type IndexOrderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IndexOrder `json:"items"`
}

// Repository type metadata.
var (
	IndexOrder_Kind             = "IndexOrder"
	IndexOrder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IndexOrder_Kind}.String()
	IndexOrder_KindAPIVersion   = IndexOrder_Kind + "." + CRDGroupVersion.String()
	IndexOrder_GroupVersionKind = CRDGroupVersion.WithKind(IndexOrder_Kind)
)

func init() {
	SchemeBuilder.Register(&IndexOrder{}, &IndexOrderList{})
}
