/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExclusionFilterObservation struct {
}

type ExclusionFilterParameters struct {

	// Exclusion filter name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Exclusion filter query. Logs that match this query are excluded from the security filter.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

type MonitoringFilterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type MonitoringFilterParameters struct {

	// Exclusion filters to exclude some logs from the security filter.
	// +kubebuilder:validation:Optional
	ExclusionFilter []ExclusionFilterParameters `json:"exclusionFilter,omitempty" tf:"exclusion_filter,omitempty"`

	// The filtered data type. Valid values are `logs`.
	// +kubebuilder:validation:Optional
	FilteredDataType *string `json:"filteredDataType,omitempty" tf:"filtered_data_type,omitempty"`

	// Whether the security filter is enabled.
	// +kubebuilder:validation:Required
	IsEnabled *bool `json:"isEnabled" tf:"is_enabled,omitempty"`

	// The query of the security filter.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`
}

// MonitoringFilterSpec defines the desired state of MonitoringFilter
type MonitoringFilterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitoringFilterParameters `json:"forProvider"`
}

// MonitoringFilterStatus defines the observed state of MonitoringFilter.
type MonitoringFilterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitoringFilterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitoringFilter is the Schema for the MonitoringFilters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type MonitoringFilter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitoringFilterSpec   `json:"spec"`
	Status            MonitoringFilterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitoringFilterList contains a list of MonitoringFilters
type MonitoringFilterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitoringFilter `json:"items"`
}

// Repository type metadata.
var (
	MonitoringFilter_Kind             = "MonitoringFilter"
	MonitoringFilter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MonitoringFilter_Kind}.String()
	MonitoringFilter_KindAPIVersion   = MonitoringFilter_Kind + "." + CRDGroupVersion.String()
	MonitoringFilter_GroupVersionKind = CRDGroupVersion.WithKind(MonitoringFilter_Kind)
)

func init() {
	SchemeBuilder.Register(&MonitoringFilter{}, &MonitoringFilterList{})
}
