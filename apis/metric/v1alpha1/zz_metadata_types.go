/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MetadataObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MetadataParameters struct {

	// A description of the metric.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the metric.
	// +kubebuilder:validation:Required
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// Per unit of the metric such as `second` in `bytes per second`.
	// +kubebuilder:validation:Optional
	PerUnit *string `json:"perUnit,omitempty" tf:"per_unit,omitempty"`

	// A short name of the metric.
	// +kubebuilder:validation:Optional
	ShortName *string `json:"shortName,omitempty" tf:"short_name,omitempty"`

	// If applicable, statsd flush interval in seconds for the metric.
	// +kubebuilder:validation:Optional
	StatsdInterval *float64 `json:"statsdInterval,omitempty" tf:"statsd_interval,omitempty"`

	// Type of the metric.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Primary unit of the metric such as `byte` or `operation`.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

// MetadataSpec defines the desired state of Metadata
type MetadataSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MetadataParameters `json:"forProvider"`
}

// MetadataStatus defines the observed state of Metadata.
type MetadataStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MetadataObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Metadata is the Schema for the Metadatas API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type Metadata struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MetadataSpec   `json:"spec"`
	Status            MetadataStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MetadataList contains a list of Metadatas
type MetadataList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Metadata `json:"items"`
}

// Repository type metadata.
var (
	Metadata_Kind             = "Metadata"
	Metadata_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Metadata_Kind}.String()
	Metadata_KindAPIVersion   = Metadata_Kind + "." + CRDGroupVersion.String()
	Metadata_GroupVersionKind = CRDGroupVersion.WithKind(Metadata_Kind)
)

func init() {
	SchemeBuilder.Register(&Metadata{}, &MetadataList{})
}
