/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AggregationsObservation struct {
}

type AggregationsParameters struct {

	// A space aggregation for use in query. Valid values are `avg`, `max`, `min`, `sum`.
	// +kubebuilder:validation:Required
	Space *string `json:"space" tf:"space,omitempty"`

	// A time aggregation for use in query. Valid values are `avg`, `count`, `max`, `min`, `sum`.
	// +kubebuilder:validation:Required
	Time *string `json:"time" tf:"time,omitempty"`
}

type TagConfigurationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TagConfigurationParameters struct {

	// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metric_type` of count, rate, or gauge.
	// +kubebuilder:validation:Optional
	Aggregations []AggregationsParameters `json:"aggregations,omitempty" tf:"aggregations,omitempty"`

	// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metric_type` of distribution.
	// +kubebuilder:validation:Optional
	IncludePercentiles *bool `json:"includePercentiles,omitempty" tf:"include_percentiles,omitempty"`

	// The metric name for this resource.
	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
	// +kubebuilder:validation:Required
	MetricType *string `json:"metricType" tf:"metric_type,omitempty"`

	// A list of tag keys that will be queryable for your metric.
	// +kubebuilder:validation:Required
	Tags []*string `json:"tags" tf:"tags,omitempty"`
}

// TagConfigurationSpec defines the desired state of TagConfiguration
type TagConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagConfigurationParameters `json:"forProvider"`
}

// TagConfigurationStatus defines the observed state of TagConfiguration.
type TagConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TagConfiguration is the Schema for the TagConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type TagConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TagConfigurationSpec   `json:"spec"`
	Status            TagConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagConfigurationList contains a list of TagConfigurations
type TagConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TagConfiguration `json:"items"`
}

// Repository type metadata.
var (
	TagConfiguration_Kind             = "TagConfiguration"
	TagConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TagConfiguration_Kind}.String()
	TagConfiguration_KindAPIVersion   = TagConfiguration_Kind + "." + CRDGroupVersion.String()
	TagConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(TagConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&TagConfiguration{}, &TagConfigurationList{})
}
